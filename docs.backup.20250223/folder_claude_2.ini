● 🎯 복잡한 기술 스택 체계화 방안

  문제 인식: 78개 dependencies + 30개 devDependencies + 119개 NPM scripts는 단순한 의존성 맵으로 커버 불가능

  ---
  📋 3단계 해결 방안

  1️⃣ TECH_STACK.md 마스터 문서 생성

  # 🛠️ 기술 스택 마스터 가이드

  ## 🎯 Tool Selection Matrix (작업별 도구 선택)

  | 작업 유형 | 우선 사용 | 대안 도구 | NPM 명령어 | 파일 위치 |
  |----------|----------|----------|-----------|----------|
  | **컴포넌트 테스트** | Vitest | Testing Library | `npm run test` | `/src/**/*.test.tsx` |
  | **E2E 테스트** | Playwright | - | `npm run e2e` | `/tests/e2e/` |
  | **API 모킹** | MSW | - | - | `/src/mocks/` |
  | **상태 관리(서버)** | TanStack Query v5 | - | - | `/src/hooks/queries/` |
  | **상태 관리(클라이언트)** | Zustand v5 | - | - | `/src/store/` |
  | **폼 처리** | React Hook Form + Zod | - | - | - |
  | **환경변수** | T3 Env | - | - | `/src/env.ts` |
  | **애니메이션** | Framer Motion v12 | - | - | - |
  | **캐러셀** | Embla Carousel | - | - | - |
  | **리치 에디터** | Tiptap v3 | - | - | - |
  | **XSS 방지** | DOMPurify | - | - | - |
  | **날짜 처리** | date-fns v4 | - | - | - |
  | **리스트 최적화** | React Window | - | - | - |
  | **번들 분석** | Bundle Analyzer | - | `npm run analyze` | - |

  ## 🔄 Decision Tree (의사결정 트리)

  ### "테스트를 작성해야 할 때"
  ```mermaid
  테스트 필요
  ├─ 컴포넌트 테스트? → Vitest + Testing Library
  ├─ E2E 테스트? → Playwright
  ├─ API 모킹 필요? → MSW
  └─ 성능 테스트? → Playwright + Vercel Analytics

  "상태 관리가 필요할 때"

  상태 관리 필요
  ├─ 서버 데이터? → TanStack Query v5
  │   ├─ 캐싱 필요? → staleTime 설정
  │   └─ 실시간? → Supabase Realtime
  └─ 클라이언트 상태? → Zustand v5
      ├─ 폼 상태? → React Hook Form
      └─ URL 상태? → Next.js useSearchParams

  "UI 컴포넌트가 필요할 때"

  UI 컴포넌트 필요
  ├─ shadcn/ui에 있음? → 바로 사용
  ├─ 애니메이션 필요? → Framer Motion v12
  ├─ 캐러셀? → Embla Carousel
  ├─ 리치 에디터? → Tiptap v3
  └─ 날짜 선택? → shadcn/ui Calendar + date-fns

  📊 NPM Scripts 카테고리 (119개 정리)

  🧪 테스트 명령어

  npm run test               # Vitest 단위 테스트
  npm run test:coverage      # 커버리지 리포트
  npm run e2e               # Playwright E2E
  npm run e2e:ui           # Playwright UI 모드

  ✅ 검증 명령어 (17개)

  npm run verify:parallel   # 모든 검증 병렬 실행 (가장 빠름)
  npm run verify:api       # API Routes 검증
  npm run verify:ui        # UI 컴포넌트 검증
  npm run verify:types     # TypeScript 타입 검증

  🔒 보안 명령어

  npm run security:test          # 보안 테스트
  npm run security:apply-rls     # RLS 정책 적용
  npm run security:scan-secrets  # 시크릿 스캔

  🎨 코드 품질

  npm run lint:biome      # Biome 린팅
  npm run format:biome    # Biome 포맷팅
  npm run biome:ci       # CI용 체크

  📦 빌드 & 분석

  npm run build          # Next.js 빌드
  npm run analyze        # 번들 크기 분석
  npm run clean         # 캐시 정리

  ---

  ### 2️⃣ **폴더별 CLAUDE.md 개선** - Tool Usage Matrix 추가

  ```markdown
  ## 🛠️ Tool Usage Matrix (이 폴더에서 사용하는 도구)

  ### src/app/api/CLAUDE.md 예시
  | 작업 | 도구/라이브러리 | 사용법 | 예시 |
  |------|----------------|--------|------|
  | **검증** | Zod v4 | `validateRequestBody()` | [코드 예시] |
  | **인증** | Supabase Auth | `getUser()` | [코드 예시] |
  | **캐싱** | IORedis | Redis 연결 | [코드 예시] |
  | **백그라운드** | BullMQ | Job Queue | [코드 예시] |
  | **환경변수** | T3 Env | `import { env }` | [코드 예시] |

  ### src/components/CLAUDE.md 예시
  | 작업 | 도구/라이브러리 | 사용법 | 예시 |
  |------|----------------|--------|------|
  | **UI 기본** | shadcn/ui | 컴포넌트 import | [코드 예시] |
  | **애니메이션** | Framer Motion | `motion.div` | [코드 예시] |
  | **폼** | React Hook Form | `useForm()` | [코드 예시] |
  | **테스트** | Vitest + Testing Library | `render()` | [코드 예시] |
  | **캐러셀** | Embla | `useEmblaCarousel()` | [코드 예시] |

  ### src/hooks/CLAUDE.md 예시
  | 작업 | 도구/라이브러리 | 사용법 | 예시 |
  |------|----------------|--------|------|
  | **서버 상태** | TanStack Query v5 | `useQuery()` | [코드 예시] |
  | **무한 스크롤** | React Window | `FixedSizeList` | [코드 예시] |
  | **캐싱** | LRU Cache | 메모리 캐시 | [코드 예시] |
  | **DevTools** | Query DevTools | 디버깅 | [코드 예시] |

  ---
  3️⃣ INSTRUCTION_TEMPLATE_v16.md 개선

  ## 🆕 기술 스택 자동 감지 섹션 (v17 제안)

  ### 📋 작업별 도구 체크리스트
  ```markdown
  ## 🛠️ 기술 스택 확인 (작업별 자동 선택)

  ### 작업 유형 감지
  - [ ] 테스트 작성 → Vitest + Testing Library + MSW
  - [ ] E2E 테스트 → Playwright
  - [ ] 상태 관리 → TanStack Query (서버) / Zustand (클라이언트)
  - [ ] 폼 처리 → React Hook Form + Zod
  - [ ] 애니메이션 → Framer Motion v12
  - [ ] 성능 최적화 → Bundle Analyzer + React Window
  - [ ] 보안 처리 → DOMPurify + Crypto-JS

  ### 자동 적용 도구
  ```bash
  # 작업 유형 확인
  echo "작업: [작업명]"

  # 관련 도구 자동 확인
  grep -r "import.*vitest" src/  # 테스트 패턴 확인
  grep -r "useQuery" src/         # React Query 사용 확인
  grep -r "motion\." src/         # Framer Motion 사용 확인

  필수 NPM Scripts

  - 검증: npm run verify:parallel
  - 테스트: npm run test
  - 빌드 확인: npm run build


  ---
  📂 새로운 문서 구조 제안

  프로젝트 루트/
  ├── TECH_STACK.md              # 🆕 기술 스택 마스터 가이드
  ├── docs/
  │   ├── TOOL_DECISION_TREE.md  # 🆕 도구 선택 의사결정 트리
  │   ├── NPM_SCRIPTS_GUIDE.md   # 🆕 119개 스크립트 가이드
  │   └── [기존 14개 문서]
  └── src/
      └── [각 폴더]/
          └── CLAUDE.md           # Tool Usage Matrix 추가

  ---
  🔧 구현 방법

  Step 1: TECH_STACK.md 생성

  # 1. 모든 dependencies 분석
  cat package.json | jq '.dependencies, .devDependencies' > tech-analysis.json

  # 2. 용도별 분류
  node scripts/categorize-dependencies.js

  # 3. 문서 생성
  node scripts/generate-tech-stack-doc.js

  Step 2: 폴더별 Tool Usage Matrix 추가

  // scripts/add-tool-matrix.js
  const folders = ['src/app/api', 'src/components', 'src/hooks', ...];

  folders.forEach(folder => {
    const claudeMd = `${folder}/CLAUDE.md`;
    const toolMatrix = generateToolMatrix(folder);
    appendToFile(claudeMd, toolMatrix);
  });

  Step 3: INSTRUCTION_TEMPLATE 업데이트

  - 기술 스택 자동 감지 섹션 추가
  - 작업별 도구 체크리스트 포함
  - NPM scripts 자동 매핑