● 📋 폴더별 CLAUDE.md 개선 제안서

  🎯 핵심 목표

  Context 없는 Claude Code가 효율적으로 작업할 수 있는 환경 구축

  ---
  ✅ 10개 검증 시나리오 분석 결과

  검증 완료된 시나리오들:

  1. 새 컴포넌트 생성 → 폴더 구조도 필요
  2. API 연결 → 패턴 템플릿 필요
  3. 타입 정의 → import 경로 명시 필요
  4. 에러 처리 → 즉시 해결법 필요
  5. 상태 관리 → 결정 트리 필요
  6. 보안 검증 → 체크리스트 필요
  7. 테스트 작성 → 파일 위치 가이드 필요
  8. 문서 업데이트 → 매트릭스 필요
  9. 디버깅 → 순서도 필요
  10. 배포 준비 → 명령어 리스트 필요

  ---
  🔧 각 폴더별 CLAUDE.md 추가 필요 섹션

  1️⃣ 폴더 구조도 & 5W1H (모든 폴더 공통)

  ## 📂 폴더 구조 & 역할

  ### 구조도
  src/app/api/
  ├── auth/           # 인증 관련 API
  │   ├── login/
  │   └── logout/
  ├── youtube/        # YouTube 관련 API
  │   ├── search/
  │   └── popular/
  └── user/          # 사용자 관련 API

  ### 5W1H 분석
  - **What**: API Route 핸들러들
  - **Why**: 서버사이드 비즈니스 로직 처리
  - **When**: 클라이언트가 데이터 요청 시
  - **Where**: /api/* 경로로 접근
  - **Who**: Client Components, React Query hooks
  - **How**: NextResponse.json()으로 응답

  2️⃣ Quick Reference (토큰 효율성)

  ## 🎯 Quick Reference

  ### 가장 자주 사용하는 패턴 (복사용)

  ```typescript
  // 1. 인증된 GET 요청
  export async function GET(): Promise<NextResponse> {
    const supabase = await createSupabaseRouteHandlerClient();
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    // 로직
  }

  // 2. Zod 검증 POST
  export async function POST(request: Request): Promise<NextResponse> {
    const validation = await validateRequestBody(request, schema);
    if (!validation.success) return createValidationErrorResponse(validation.error);
    // 로직
  }

  ### 3️⃣ **의존성 맵**

  ```markdown
  ## 🔗 의존성 관계

  ### Dependencies (이 폴더가 사용)
  - `/lib/supabase/` - Supabase 클라이언트
  - `/lib/security/` - 검증 스키마
  - `/types/` - TypeScript 타입

  ### Dependents (이 폴더를 사용)
  - `/hooks/queries/` - React Query 훅
  - `/components/` - Client Components

  ### ⚠️ 순환 의존 방지
  - API Route는 컴포넌트를 import 금지
  - 타입만 공유, 로직은 분리

  4️⃣ 작업 시나리오

  ## 🚀 작업 시나리오

  ### 새 API 엔드포인트 추가 시
  1. ✅ `src/app/api/[domain]/[action]/route.ts` 생성
  2. ✅ 인증 체크 추가 (필수)
  3. ✅ Zod 스키마 정의
  4. ✅ 에러 처리 구현
  5. ✅ `/docs/WIREFRAME.md` 업데이트
  6. ✅ 테스트 작성

  ### 기존 API 수정 시
  1. ✅ 영향받는 훅 확인 (`/hooks/queries/`)
  2. ✅ 타입 변경사항 확인
  3. ✅ 테스트 실행

  5️⃣ 자주 발생하는 에러

  ## ❌ 자주 발생하는 에러 & 즉시 해결법

  | 에러 | 원인 | 해결 |
  |-----|------|------|
  | `PKCE flow error` | auth-helpers 사용 | `createSupabaseRouteHandlerClient()` 사용 |
  | `undefined env vars` | process.env 직접 접근 | `import { env } from '@/env'` |
  | `Type 'Response' is not assignable` | new Response() 사용 | `NextResponse.json()` 사용 |
  | `401 Unauthorized` | getSession() 사용 | `getUser()` 사용 |

  ---
  📝 DOCUMENT_GUIDE.md 업데이트 방안

  새로운 문서 체계 (15개 → 27개)

  ## 📚 3단계 문서 체계

  ### Level 1: 프로젝트 전체 (14개 핵심 문서)
  docs/
  ├── CONTEXT_BRIDGE.md      # 반복 실수 방지
  ├── PROJECT.md             # 프로젝트 현황
  └── ... (기존 14개)

  ### Level 2: 폴더별 가이드 (12개 CLAUDE.md) ← NEW!
  src/
  ├── app/
  │   ├── api/CLAUDE.md        # API 개발 가이드
  │   └── (pages)/CLAUDE.md    # 페이지 개발 가이드
  ├── components/CLAUDE.md      # 컴포넌트 가이드
  ├── hooks/CLAUDE.md           # React Query 가이드
  ├── lib/
  │   ├── CLAUDE.md            # 라이브러리 가이드
  │   ├── supabase/CLAUDE.md   # Supabase 가이드
  │   └── security/CLAUDE.md   # 보안 가이드
  ├── types/CLAUDE.md          # 타입 시스템 가이드
  ├── scripts/CLAUDE.md        # 스크립트 가이드
  └── tests/CLAUDE.md          # 테스트 가이드

  ### Level 3: 프로젝트 루트 (1개)
  CLAUDE.md                    # AI 작업 네비게이터

  문서 간 관계 재정의

  ## 🔄 새로운 참조 구조

  CLAUDE.md (루트 네비게이터)
  ├→ 14개 핵심 문서 (프로젝트 전체)
  └→ 12개 폴더별 CLAUDE.md (상세 가이드)
      └→ 각 폴더의 구체적 패턴과 규칙

  ### 역할 분담
  - **루트 CLAUDE.md**: 전체 맵, 빠른 네비게이션
  - **핵심 14개 문서**: 프로젝트 전체 정보
  - **폴더별 CLAUDE.md**: 해당 폴더 전문 지식

  ---
  🎯 기대 효과

  토큰 효율성

  - Before: 매번 전체 문서 읽기 (30K+ 토큰)
  - After: 필요한 폴더만 읽기 (3-5K 토큰)
  - 절감률: 약 85%

  작업 정확도

  - 5W1H로 명확한 컨텍스트 제공
  - Quick Reference로 즉시 사용 가능
  - 에러 해결법으로 시간 단축

  Claude Code 경험

  - Context 없어도 폴더 역할 이해
  - 의존성 맵으로 영향 범위 파악
  - 작업 시나리오로 체계적 진행