# Pre-commit Hook v1.0
# 커밋 전 코드 품질 검증

echo "🔍 Pre-commit 검증 시작..."

# 1단계: 빠른 핵심 검증 (5초 이내)
echo "📋 Step 1/3: 핵심 검증 실행 중..."
npm run verify:quick || {
  echo "❌ 핵심 검증 실패! 다음 문제를 수정하세요:"
  echo "  - API 인증 일치성"
  echo "  - TypeScript 타입 안정성"
  exit 1
}

# 2단계: staged 파일만 검증 (성능 최적화)
echo "📋 Step 2/3: Staged 파일 검증 중..."

# staged된 TypeScript 파일 목록
STAGED_TS_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(ts|tsx)$' || true)

if [ -n "$STAGED_TS_FILES" ]; then
  echo "  검증 대상: $(echo $STAGED_TS_FILES | wc -w)개 파일"
  
  # TypeScript 컴파일 체크
  npx tsc --noEmit --skipLibCheck || {
    echo "❌ TypeScript 컴파일 오류!"
    echo ""
    echo "💡 해결 방법:"
    echo "  1. 자동 수정 시도: npm run types:auto-fix"
    echo "  2. DB 변경 시: npm run types:generate"
    echo "  3. 타입 확인: npm run types:check"
    exit 1
  }
fi

# staged된 API route 파일 확인
STAGED_API_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E 'src/app/api/.*route\.(ts|tsx)$' || true)

if [ -n "$STAGED_API_FILES" ]; then
  echo "  API Route 변경 감지 - 보안 검증 실행"
  npm run verify:routes || {
    echo "❌ API Route 보안 검증 실패!"
    echo "  모든 API Route는 인증 체크가 필요합니다."
    exit 1
  }
fi

# 3단계: Biome 린팅 및 포맷팅 (새로 추가!)
echo "📋 Step 3/5: Biome 코드 품질 검사..."

# Biome 설치 확인 및 실행
if [ -f "biome.json" ]; then
  # staged된 소스 파일만 검사
  STAGED_SRC_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E 'src/.*\.(ts|tsx|js|jsx)$' || true)
  
  if [ -n "$STAGED_SRC_FILES" ]; then
    echo "  Biome 검사 중... ($(echo $STAGED_SRC_FILES | wc -w)개 파일)"
    npx biome check --write $STAGED_SRC_FILES || {
      echo "⚠️  Biome 검사 경고 - 자동 수정 시도됨"
      echo "  'npm run lint:biome:fix'로 전체 수정 가능"
    }
    # 수정된 파일 다시 stage
    echo "$STAGED_SRC_FILES" | xargs git add
  fi
else
  echo "  ⚠️  Biome 설정 없음 - 건너뜀"
fi

# 4단계: 테스트 실행 (Vitest)
echo "📋 Step 4/5: 테스트 실행..."

# staged된 테스트 가능한 파일 확인
STAGED_TESTABLE_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E 'src/.*\.(ts|tsx)$' | grep -v '\.test\.' | grep -v '\.spec\.' || true)

if [ -n "$STAGED_TESTABLE_FILES" ]; then
  # 해당 파일의 테스트 파일 존재 여부 확인
  HAS_TEST_FILES=false
  for FILE in $STAGED_TESTABLE_FILES; do
    TEST_FILE="${FILE%.*}.test.${FILE##*.}"
    SPEC_FILE="${FILE%.*}.spec.${FILE##*.}"
    if [ -f "$TEST_FILE" ] || [ -f "$SPEC_FILE" ]; then
      HAS_TEST_FILES=true
      break
    fi
  done
  
  if [ "$HAS_TEST_FILES" = true ]; then
    echo "  테스트 파일 감지 - 관련 테스트 실행 중..."
    npm run verify:test || {
      echo "⚠️  테스트 실패 - 테스트를 확인하세요"
      echo "  'npm run test'로 상세 확인 가능"
      # 테스트 실패는 경고만, 커밋은 허용
    }
  else
    echo "  ⚠️  테스트 파일 없음 - 테스트 작성을 권장합니다"
  fi
else
  echo "  테스트 대상 파일 없음 - 건너뜀"
fi

# 5단계: 자동 포맷팅 (선택적)
echo "📋 Step 5/5: 코드 포맷팅..."

# Prettier 설치 확인
if command -v npx prettier > /dev/null 2>&1; then
  # staged 파일만 포맷팅
  STAGED_FORMAT_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(ts|tsx|js|jsx|json|md)$' || true)
  
  if [ -n "$STAGED_FORMAT_FILES" ]; then
    echo "$STAGED_FORMAT_FILES" | xargs npx prettier --write
    echo "$STAGED_FORMAT_FILES" | xargs git add
    echo "  ✅ 코드 포맷팅 완료"
  fi
else
  echo "  ⚠️  Prettier 없음 - 포맷팅 건너뜀"
fi

echo "✅ Pre-commit 검증 통과!"
echo ""
echo "💡 팁: 검증 없이 커밋하려면 --no-verify 사용"
echo "  git commit --no-verify -m \"message\""
echo ""

exit 0