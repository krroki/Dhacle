#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

# Pre-commit Hook v1.0
# 커밋 전 코드 품질 검증

echo "🔍 Pre-commit 검증 시작..."

# 1단계: 빠른 핵심 검증 (5초 이내)
echo "📋 Step 1/3: 핵심 검증 실행 중..."
npm run verify:quick || {
  echo "❌ 핵심 검증 실패! 다음 문제를 수정하세요:"
  echo "  - API 인증 일치성"
  echo "  - TypeScript 타입 안정성"
  exit 1
}

# 2단계: staged 파일만 검증 (성능 최적화)
echo "📋 Step 2/3: Staged 파일 검증 중..."

# staged된 TypeScript 파일 목록
STAGED_TS_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(ts|tsx)$' || true)

if [ -n "$STAGED_TS_FILES" ]; then
  echo "  검증 대상: $(echo $STAGED_TS_FILES | wc -w)개 파일"
  
  # TypeScript 컴파일 체크
  npx tsc --noEmit --skipLibCheck || {
    echo "❌ TypeScript 컴파일 오류!"
    exit 1
  }
fi

# staged된 API route 파일 확인
STAGED_API_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E 'src/app/api/.*route\.(ts|tsx)$' || true)

if [ -n "$STAGED_API_FILES" ]; then
  echo "  API Route 변경 감지 - 보안 검증 실행"
  npm run verify:routes || {
    echo "❌ API Route 보안 검증 실패!"
    echo "  모든 API Route는 인증 체크가 필요합니다."
    exit 1
  }
fi

# 3단계: 자동 포맷팅 (선택적)
echo "📋 Step 3/3: 코드 포맷팅..."

# Prettier 설치 확인
if command -v npx prettier > /dev/null 2>&1; then
  # staged 파일만 포맷팅
  STAGED_FORMAT_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(ts|tsx|js|jsx|json|md)$' || true)
  
  if [ -n "$STAGED_FORMAT_FILES" ]; then
    echo "$STAGED_FORMAT_FILES" | xargs npx prettier --write
    echo "$STAGED_FORMAT_FILES" | xargs git add
    echo "  ✅ 코드 포맷팅 완료"
  fi
else
  echo "  ⚠️  Prettier 없음 - 포맷팅 건너뜀"
fi

echo "✅ Pre-commit 검증 통과!"
echo ""
echo "💡 팁: 검증 없이 커밋하려면 --no-verify 사용"
echo "  git commit --no-verify -m \"message\""
echo ""

exit 0