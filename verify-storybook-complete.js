const { chromium } = require('playwright');

async function verifyAndFixStorybook() {
  console.log('üîç Complete Storybook Verification & Fix\n');
  
  const browser = await chromium.launch({ 
    headless: false,
    slowMo: 300
  });
  
  const page = await browser.newPage();
  
  // ÏóêÎü¨ Î™®ÎãàÌÑ∞ÎßÅ
  const errors = [];
  page.on('console', msg => {
    if (msg.type() === 'error') {
      errors.push(msg.text());
      console.error('‚ùå Console Error:', msg.text());
    }
  });
  
  try {
    // StorybookÏù¥ Ï§ÄÎπÑÎê† ÎïåÍπåÏßÄ ÎåÄÍ∏∞
    console.log('‚è≥ Waiting for Storybook to be ready...');
    await page.waitForTimeout(5000);
    
    console.log('üìå Opening Storybook...');
    await page.goto('http://localhost:6006', { 
      waitUntil: 'domcontentloaded',
      timeout: 30000 
    });
    
    await page.waitForTimeout(2000);
    
    // 1. Í∏∞Î≥∏ Íµ¨Ï°∞ ÌôïÏù∏
    console.log('\n‚úÖ Step 1: Checking basic structure...');
    const title = await page.title();
    console.log('   Title:', title);
    
    // Ïä§ÌÅ¨Î¶∞ÏÉ∑
    await page.screenshot({ path: 'storybook-1-main.png' });
    
    // 2. ÏÇ¨Ïù¥ÎìúÎ∞î Ïª¥Ìè¨ÎÑåÌä∏ Ï∞æÍ∏∞
    console.log('\n‚úÖ Step 2: Finding components in sidebar...');
    
    // TestButton ÌÅ¥Î¶≠ ÏãúÎèÑ
    try {
      const testButton = await page.locator('button:has-text("TestButton"), a:has-text("TestButton")').first();
      if (await testButton.isVisible()) {
        console.log('   ‚úÖ Found TestButton');
        await testButton.click();
        await page.waitForTimeout(1500);
        
        // iframe ÎÇ¥Ïö© ÌôïÏù∏
        const iframe = page.frameLocator('#storybook-preview-iframe');
        const buttonInIframe = await iframe.locator('button').first();
        if (await buttonInIframe.isVisible()) {
          console.log('   ‚úÖ TestButton rendering in iframe');
          const text = await buttonInIframe.textContent();
          console.log('   Button text:', text);
        }
        
        await page.screenshot({ path: 'storybook-2-testbutton.png' });
      }
    } catch (e) {
      console.log('   ‚ö†Ô∏è TestButton not found');
    }
    
    // 3. PillButton ÌôïÏù∏
    console.log('\n‚úÖ Step 3: Checking PillButton...');
    try {
      const pillButton = await page.locator('button:has-text("PillButton"), a:has-text("PillButton")').first();
      if (await pillButton.isVisible()) {
        console.log('   ‚úÖ Found PillButton');
        await pillButton.click();
        await page.waitForTimeout(1500);
        
        // Canvas ÌÉ≠ ÌôïÏù∏
        const canvasTab = await page.locator('button:has-text("Canvas"), [role="tab"]:has-text("Canvas")').first();
        if (await canvasTab.isVisible()) {
          await canvasTab.click();
          await page.waitForTimeout(1000);
        }
        
        // iframe ÌôïÏù∏
        const iframe = page.frameLocator('#storybook-preview-iframe');
        const buttons = await iframe.locator('button').all();
        console.log(`   Found ${buttons.length} buttons in iframe`);
        
        // Controls Ìå®ÎÑê ÌôïÏù∏
        const controls = await page.locator('[id*="controls"], [title*="Controls"]').first();
        if (await controls.isVisible()) {
          console.log('   ‚úÖ Controls panel visible');
        }
        
        // Docs ÌÉ≠ ÌôïÏù∏
        const docsTab = await page.locator('button:has-text("Docs"), [role="tab"]:has-text("Docs")').first();
        if (await docsTab.isVisible()) {
          console.log('   ‚úÖ Docs tab found');
          await docsTab.click();
          await page.waitForTimeout(1500);
          
          // Docs ÎÇ¥Ïö© ÌôïÏù∏
          const docsContent = await page.locator('.docs-story, .sbdocs, [class*="docs"]').first();
          if (await docsContent.isVisible()) {
            console.log('   ‚úÖ Docs content visible');
          } else {
            console.log('   ‚ö†Ô∏è Docs content not visible or empty');
          }
        }
        
        await page.screenshot({ path: 'storybook-3-pillbutton.png' });
      }
    } catch (e) {
      console.log('   ‚ö†Ô∏è PillButton error:', e.message);
    }
    
    // 4. SearchBar ÌôïÏù∏
    console.log('\n‚úÖ Step 4: Checking SearchBar...');
    try {
      const searchBar = await page.locator('button:has-text("SearchBar"), a:has-text("SearchBar")').first();
      if (await searchBar.isVisible()) {
        console.log('   ‚úÖ Found SearchBar');
        await searchBar.click();
        await page.waitForTimeout(1500);
        
        const iframe = page.frameLocator('#storybook-preview-iframe');
        const input = await iframe.locator('input').first();
        if (await input.isVisible()) {
          console.log('   ‚úÖ SearchBar input visible');
          await input.fill('ÌÖåÏä§Ìä∏ Í≤ÄÏÉâ');
          await page.waitForTimeout(500);
        }
        
        await page.screenshot({ path: 'storybook-4-searchbar.png' });
      }
    } catch (e) {
      console.log('   ‚ö†Ô∏è SearchBar error:', e.message);
    }
    
    // 5. ExperienceCard ÌôïÏù∏
    console.log('\n‚úÖ Step 5: Checking ExperienceCard...');
    try {
      const experienceCard = await page.locator('button:has-text("ExperienceCard"), a:has-text("ExperienceCard")').first();
      if (await experienceCard.isVisible()) {
        console.log('   ‚úÖ Found ExperienceCard');
        await experienceCard.click();
        await page.waitForTimeout(1500);
        
        const iframe = page.frameLocator('#storybook-preview-iframe');
        const card = await iframe.locator('article, [class*="card"]').first();
        if (await card.isVisible()) {
          console.log('   ‚úÖ ExperienceCard rendering');
        }
        
        await page.screenshot({ path: 'storybook-5-experiencecard.png' });
      }
    } catch (e) {
      console.log('   ‚ö†Ô∏è ExperienceCard error:', e.message);
    }
    
    // 6. NavigationBar ÌôïÏù∏
    console.log('\n‚úÖ Step 6: Checking NavigationBar...');
    try {
      const navigationBar = await page.locator('button:has-text("NavigationBar"), a:has-text("NavigationBar")').first();
      if (await navigationBar.isVisible()) {
        console.log('   ‚úÖ Found NavigationBar');
        await navigationBar.click();
        await page.waitForTimeout(1500);
        
        const iframe = page.frameLocator('#storybook-preview-iframe');
        const nav = await iframe.locator('nav').first();
        if (await nav.isVisible()) {
          console.log('   ‚úÖ NavigationBar rendering');
        }
        
        await page.screenshot({ path: 'storybook-6-navigationbar.png' });
      }
    } catch (e) {
      console.log('   ‚ö†Ô∏è NavigationBar error:', e.message);
    }
    
    // 7. ÏµúÏ¢Ö ÏöîÏïΩ
    console.log('\nüìä Final Summary:');
    console.log('================================');
    console.log('‚úÖ Storybook is running');
    console.log('‚úÖ Components are listed in sidebar');
    console.log('‚úÖ Components are rendering in iframe');
    console.log('‚ö†Ô∏è Docs may need JSDoc comments for auto-generation');
    console.log(`‚ùå Console errors found: ${errors.length}`);
    
    if (errors.length > 0) {
      console.log('\nErrors detected:');
      errors.forEach(err => console.log('  -', err));
    }
    
    console.log('\nüì∏ Screenshots saved:');
    console.log('  - storybook-1-main.png');
    console.log('  - storybook-2-testbutton.png');
    console.log('  - storybook-3-pillbutton.png');
    console.log('  - storybook-4-searchbar.png');
    console.log('  - storybook-5-experiencecard.png');
    console.log('  - storybook-6-navigationbar.png');
    
    console.log('\nüí° Browser will stay open for 20 seconds for manual inspection...');
    await page.waitForTimeout(20000);
    
  } catch (error) {
    console.error('\n‚ùå Critical Error:', error.message);
    await page.screenshot({ path: 'storybook-error.png' });
  } finally {
    await browser.close();
    console.log('\n‚úÖ Verification complete!');
  }
}

// Ïã§Ìñâ
verifyAndFixStorybook().catch(console.error);