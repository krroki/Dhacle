# 🎯 AI 개발 지시서 작성 가이드 v16.1 (최적화판)

**📌 이 문서의 목적**: 개발 지식이 없는 사용자의 요청을 받은 AI가, 다른 AI에게 전달할 **명확하고 품질이 보증된 지시서를 작성하는 방법**을 안내합니다.

**🤖 당신(AI)의 역할**: 
1. 사용자의 의도를 정확히 파악
2. 프로젝트 구조를 이해
3. 필요한 파일과 정보를 찾아서
4. 실행 AI가 100% 의도대로 구현할 수 있는 지시서 작성
5. 사용자 경험을 검증할 수 있는 테스트 시나리오 포함
6. 프로젝트 특화 규칙을 Context 없는 AI에게 전달
7. SuperClaude 명령어를 최상단에 배치
8. 대규모 작업은 폴더 구조로 체계적 관리
9. 임시방편 절대 금지 - 문제 발견 시 즉시 해결
10. 작성된 지시서를 tasks 폴더에 체계적으로 저장

---

## 🔥🔥🔥 최우선 프로젝트 특화 규칙 (모든 지시서 필수) 🔥🔥🔥

### ⚠️ 경고: 이 섹션 미확인 시 프로젝트 파괴 가능성 90%

#### 📌 필수 확인 문서 체크리스트
```markdown
- [ ] `/docs/CONTEXT_BRIDGE.md` - 프로젝트 특화 규칙 (전체 읽기 필수)
- [ ] `/CLAUDE.md` 17-43행 - 자동 스크립트 절대 금지
- [ ] `/CLAUDE.md` 352-410행 - Supabase 클라이언트 패턴
- [ ] `/CLAUDE.md` 54-71행 - 절대 금지사항 목록
- [ ] `/docs/ERROR_BOUNDARY.md` - 에러 처리 표준 패턴
```

#### 🚫 프로젝트 금지사항 (절대 위반 불가)
```markdown
- [ ] 자동 변환 스크립트 생성 금지 (38개 스크립트 재앙 경험)
- [ ] 구식 Supabase 패턴 사용 금지 (createServerComponentClient 등)
- [ ] database.generated.ts 직접 import 금지
- [ ] any 타입 사용 금지
- [ ] fetch() 직접 호출 금지
- [ ] getSession() 사용 금지 (getUser() 사용)
- [ ] 임시방편 해결책 사용 금지 (주석 처리, TODO, 빈 배열 반환 등)
```

#### 🔍 작업 전 필수 검증 명령어
```bash
# 최신 패턴 확인
grep -r "createSupabaseServerClient" src/

# 금지 패턴 검사
grep -r "createServerComponentClient" src/  # 0개여야 함
grep -r ": any" src/ --include="*.ts"      # 0개여야 함

# 자동 스크립트 존재 확인
ls scripts/fix-*.js 2>/dev/null  # 없어야 함

# 빌드 및 타입 체크
npm run build
npm run types:check
```

#### 📚 프로젝트 핵심 정보
- **프레임워크**: Next.js 15.4.6 (App Router)
- **데이터베이스**: Supabase
- **스타일링**: Tailwind CSS (다른 방식 금지)
- **인증**: Supabase Auth (getUser() 사용)
- **타입 관리**: @/types에서만 import

---

## 🚨 v16.1 핵심 개선사항

### 🎯 지시서 작성 시 명령어 위치

**모든 지시서는 다음 형식으로 시작:**
```markdown
/sc:[command] --[flags]
"[구체적 실행 지시]"

# [지시서 제목]

⚠️ → 상단 '최우선 프로젝트 특화 규칙' 필수 확인
[이하 내용...]
```

### 📂 폴더 구조 결정 기준

| 기준 | 단일 파일 | 폴더 구조 (필수) |
|------|-----------|------------------|
| Phase 수 | < 3개 | ≥ 3개 |
| 작업 시간 | < 2시간 | ≥ 2시간 |
| 파일 수 | < 10개 | ≥ 10개 |
| 코드 라인 | < 500줄 | ≥ 500줄 |
| 세션 횟수 | 1회 | 여러 세션 |

**대규모 작업 시 필수 폴더 구조:**
```
docs/
└── [project-name]/              # 프로젝트 전용 폴더
    ├── README.md                # 전체 개요 및 진입점
    ├── PHASE_1_[NAME].md       # Phase 1 상세
    ├── PHASE_2_[NAME].md       # Phase 2 상세
    └── PHASE_3_[NAME].md       # Phase 3 상세
```

---

## 🆕 지시서 표준 템플릿

### 📄 마스터 템플릿

```markdown
/sc:[command] --[flags]
"[구체적 실행 지시]"

# [지시서 제목]

⚠️ → 상단 '최우선 프로젝트 특화 규칙' 필수 확인

## 📚 온보딩 섹션
### 작업 관련 경로
- 페이지: `src/app/(pages)/[경로]/page.tsx`
- 컴포넌트: `src/components/[경로]/`
- API: `src/app/api/[경로]/route.ts`
- 타입: `src/types/index.ts`

### 프로젝트 컨텍스트 확인
\`\`\`bash
# 기술 스택 확인
cat package.json | grep -A 5 "dependencies"

# 프로젝트 구조 확인  
ls -la src/

# 최신 변경사항 확인
cat /docs/PROJECT.md | grep -A 10 "최근 변경"
\`\`\`

## 📌 목적
[지시서의 목적 설명]

## 🤖 실행 AI 역할
[AI가 수행할 역할 명세]

## 📝 작업 내용
[구체적 작업 단계]

## ✅ 완료 조건
- [ ] 기능 완전 작동 (빌드 성공이 아닌 실제 동작)
- [ ] 타입 안정성 (any 타입 0개)
- [ ] 프로젝트 규칙 준수
- [ ] 테스트 통과
- [ ] 문서 업데이트

## 📋 QA 테스트 시나리오
### 정상 플로우
[Happy Path 테스트]

### 실패 시나리오
[예외 처리 테스트]

### 성능 측정
[Core Web Vitals 기준]

## 🔄 롤백 계획
\`\`\`bash
# 실패 시 롤백 명령어
[구체적 롤백 절차]
\`\`\`
```

---

## 🚫 절대 금지사항 (Claude Code 나쁜 습관)

1. **추측하지 마세요** → 실제 파일을 확인하고 작성
2. **대충 넘기지 마세요** → 모든 단계를 구체적으로 작성
3. **추상적으로 쓰지 마세요** → 실제 경로를 찾아 작성
4. **생략하지 마세요** → "..." 대신 전체 코드 포함
5. **거짓말하지 마세요** → 모르면 "확인 필요"라고 작성
6. **프로젝트 특화 규칙 무시 금지** → CONTEXT_BRIDGE.md 반드시 확인
7. **명령어를 중간에 넣지 마세요** → SuperClaude 명령어는 항상 최상단
8. **대규모 작업을 단일 파일로 만들지 마세요** → 폴더 구조 사용
9. **임시방편으로 회피하지 마세요** → 문제의 근본 원인을 찾아 완전히 해결

---

## 📋 지시서 작성 7단계 프로세스

### Step 0: SuperClaude 명령어 결정 & 프로젝트 학습

#### 작업 유형별 명령어 매핑
| 작업 유형 | 추천 명령어 | 필수 플래그 | 선택 플래그 |
|---------|------------|------------|------------|
| 버그 수정 | /sc:troubleshoot | --seq --validate | --think |
| UI 개선 | /sc:improve | --magic --c7 | --validate |
| 기능 추가 | /sc:implement | --seq --validate | --c7 --think |
| 검증/감사 | /sc:analyze | --seq --validate | --ultrathink |
| 리팩토링 | /sc:improve | --seq --think | --validate |
| 문서 작성 | /sc:document | --persona-scribe | --c7 |

#### 복잡도 기반 플래그 선택
- **Simple** (< 3 파일): `--validate`
- **Moderate** (3-10 파일): `--seq --think --validate`
- **Complex** (> 10 파일): `--seq --ultrathink --delegate files --validate`
- **Enterprise** (전체 시스템): `--seq --ultrathink --all-mcp --wave-mode`

### Step 1: 사용자 요청 분석

```markdown
사용자 요청: "[원본 요청]"

분석 결과:
- 문제 위치: [구체적 위치]
- 문제 기능: [기능명]
- 문제 유형: [버그/개선/추가]
- 작업 규모: [Simple/Moderate/Complex/Enterprise]
- 구조 결정: [단일 파일/폴더 구조]
```

### Step 2: 프로젝트 구조 파악

```bash
# 관련 파일 찾기
find src -name "*[관련키워드]*"
grep -r "[키워드]" src --include="*.tsx" --include="*.ts"

# API 라우트 확인
ls -la src/app/api/[관련경로]/

# 타입 정의 확인
grep -r "[타입명]" src/types/ --include="*.ts"
```

### Step 3: 필수 확인 사항 정리

```markdown
필수 확인 파일:
1. ⚠️ 상단 '최우선 프로젝트 특화 규칙' 확인
2. 페이지: [실제 경로]
3. 컴포넌트: [실제 경로]
4. API: [실제 경로]
5. 타입: [실제 경로]

금지사항 재확인:
- [ ] 모든 프로젝트 금지사항 준수
```

### Step 4: 실행 단계 작성

```markdown
실행 단계:
0. ⚠️ 상단 '최우선 프로젝트 특화 규칙' 확인
1. [구체적 작업 1]
   - 파일: [경로]
   - 수정: [내용]
2. [구체적 작업 2]
   - 파일: [경로]
   - 수정: [내용]
```

### Step 5: 검증 기준 작성

```markdown
성공 기준:
1. 프로젝트 규칙 준수
   - [ ] 금지사항 위반 없음
   - [ ] 올바른 패턴 사용
2. 기능 테스트
   - [ ] 실제 기능 작동 확인
   - [ ] 에러 없음
3. 성능 기준
   - [ ] 응답 시간 < 500ms
```

### Step 6: QA 테스트 시나리오

#### 사용자 플로우 테스트
```markdown
정상 플로우:
1. 시작 상태: [상태]
2. 사용자 행동: [행동 순서]
3. 검증 포인트: [예상 결과]

실패 시나리오:
1. [실패 케이스 1]
2. [실패 케이스 2]
```

#### 엣지 케이스 체크리스트
| 테스트 항목 | 입력값 | 예상 결과 | 실제 결과 |
|------------|--------|-----------|-----------|
| 빈 입력 | "" | 에러 메시지 | ☐ |
| 최대 길이 | 255자 | 정상 처리 | ☐ |
| 특수문자 | <script> | XSS 방지 | ☐ |

#### 성능 & 접근성 기준
```markdown
Core Web Vitals:
⚡ LCP: < 2.5s
⚡ FID: < 100ms  
⚡ CLS: < 0.1

WCAG 2.1 AA:
♿ 키보드 네비게이션
♿ 스크린 리더 호환
♿ 색상 대비 4.5:1
```

---

## 🎯 케이스별 작성 예시 (간략판)

### 1️⃣ 버그 수정 예시

```markdown
/sc:troubleshoot --seq --validate --think
"[버그 설명]"

# 버그 수정 지시서: [제목]

⚠️ → 상단 '최우선 프로젝트 특화 규칙' 필수 확인

## 문제 상황
- 위치: [경로]
- 증상: [설명]
- 원인: [분석]

## 수정 내용
[구체적 수정 사항]

## 테스트 시나리오
[테스트 방법]
```

### 2️⃣ UI 개선 예시

```markdown
/sc:improve --magic --c7 --validate
"[UI 개선 내용]"

# UI 개선 지시서: [제목]

⚠️ → 상단 '최우선 프로젝트 특화 규칙' 필수 확인

## 개선 목표
[목표 설명]

## 수정 파일
[파일 목록과 변경 내용]

## 반응형 처리
[모바일/태블릿/데스크톱]
```

### 3️⃣ 기능 추가 예시

```markdown
/sc:implement --seq --validate --c7
"[기능 설명]"

# 기능 추가 지시서: [제목]

⚠️ → 상단 '최우선 프로젝트 특화 규칙' 필수 확인

## 추가할 기능
[기능 명세]

## 구현 단계
[단계별 구현 계획]

## DB 스키마 (필요시)
[테이블 구조]
```

---

## 📂 대규모 작업 시 Phase 분할

### Phase별 README.md 템플릿

```markdown
# 🎯 [프로젝트명]

## 📊 현재 진행 상황
| Phase | 작업 내용 | 상태 | 시작일 | 완료일 |
|-------|----------|------|--------|--------|
| Phase 1 | [작업] | ⏳ | - | - |

## 🚀 빠른 시작 가이드
1. Phase 1부터 순차적 진행
2. 각 Phase 완료 조건 확인

## 📋 Phase 간 의존성
Phase 1 → Phase 2 → Phase 3
```

### 개별 Phase 템플릿

```markdown
/sc:[command] --[flags]
"Phase [N]: [작업]"

# Phase [N]: [제목]

⚠️ → 상단 '최우선 프로젝트 특화 규칙' 필수 확인

## 📌 Phase 정보
- Phase 번호: [N]/[전체]
- 예상 시간: [X]시간
- 우선순위: [CRITICAL/HIGH/MEDIUM/LOW]

## 🎯 Phase 목표
[목표 목록]

## 📝 작업 내용
[상세 작업]

## ✅ 완료 조건
- [ ] 기능 완전 작동
- [ ] 타입 안정성
- [ ] 테스트 통과

## → 다음 Phase
- 파일: PHASE_[N+1]_[NAME].md
```

---

## 🔄 롤백 계획 템플릿

```markdown
## 🔄 롤백 계획

### 백업 체크리스트
- [ ] 데이터베이스 백업
- [ ] 현재 코드 커밋
- [ ] 환경 변수 백업

### 롤백 트리거 조건
- 빌드 실패 5회 이상
- 핵심 기능 작동 불가
- 데이터 무결성 위반

### 롤백 절차
1. git reset --hard [커밋해시]
2. npm install
3. DB 롤백 (필요시)

### 부분 롤백 전략
- 특정 기능만 이전 버전으로
- 점진적 롤백
```

---

## 📊 성과 측정 기준

```markdown
## 📊 성과 측정

### 정량적 지표
| 지표 | Before | After | 개선율 |
|------|--------|-------|--------|
| 응답 시간 | [ms] | [ms] | [%] |
| 에러율 | [%] | [%] | [%] |
| 번들 크기 | [KB] | [KB] | [%] |

### 정성적 지표
- [ ] 사용자 경험 개선
- [ ] 코드 가독성 향상
- [ ] 유지보수성 개선

### ROI 계산
투입 시간: [시간]
절감 효과: [시간/월]
ROI: [%]
```

---

## 🌊 Enterprise Wave Mode 가이드

### Wave Mode 활용 기준
- **활성화 조건**: 복잡도 ≥0.7 AND 파일 >20 AND 작업유형 >2
- **전략 선택**:
  - Progressive: 점진적 개선
  - Systematic: 체계적 분석
  - Adaptive: 동적 조정
  - Enterprise: 대규모 시스템

### Wave 구성 예시
```markdown
Wave 1: Discovery & Analysis
Wave 2: Planning & Design
Wave 3: Implementation
Wave 4: Validation
Wave 5: Optimization
```

---

## 🔍 지시서 품질 검증 체크리스트

### 필수 요소 체크
- [ ] SuperClaude 명령어 최상단 배치
- [ ] ⚠️ 프로젝트 특화 규칙 참조
- [ ] 구체적 파일 경로 포함
- [ ] 테스트 시나리오 포함
- [ ] 롤백 계획 포함

### 품질 기준 체크
- [ ] 실행 가능성 100%
- [ ] 의도 전달 명확성
- [ ] 프로젝트 규칙 준수
- [ ] 임시방편 없음

### 저장 위치
```
tasks/
└── [날짜]_[작업명]/
    └── instruction.md
```

---

## 📝 지시서 작성 실패 시 응답

```markdown
## 추가 정보 필요

### 명확히 해주세요:
1. [질문 1]
2. [질문 2]

### 확인 방법:
\`\`\`bash
[확인 명령어]
\`\`\`
```

---

## 🎯 핵심 원칙 (v16.1)

1. **실행 AI는 당신의 지시서만 보고 작업합니다**
   - 프로젝트를 모르므로 구체적으로 안내
   - ⚠️ 프로젝트 특화 규칙 강조 필수

2. **사용자의 의도를 100% 구현하는 것이 목표**
   - 실행 가능이 아닌 의도대로 구현
   - 임시방편 없이 완전한 해결

3. **친절하고 구체적으로 작성**
   - 추상적 표현 금지
   - 실제 경로와 코드 제공

4. **품질을 보증하세요**
   - 기능 동작과 사용자 경험 검증
   - 성능, 접근성, 보안 고려

5. **지시서 작성 AI도 학습 필요**
   - Step 0에서 프로젝트 컨텍스트 학습
   - CONTEXT_BRIDGE.md 필수 확인

6. **규모에 맞는 접근법 선택**
   - Simple: 직접 실행
   - Complex: 병렬 처리
   - Enterprise: Wave Mode

7. **프로젝트 특화 규칙 최우선**
   - 모든 지시서의 첫 번째 고려사항
   - 자동 스크립트 생성 절대 금지

8. **리스크 관리 필수**
   - 모든 중요 작업은 롤백 계획 포함
   - 실패 시 복구 절차 명시

9. **체계적 관리 필수**
   - 대규모 작업은 폴더 구조 필수
   - Phase별 독립성 보장

10. **완전성 추구**
    - 빌드 성공이 아닌 기능 완전 작동
    - 문제 발견 시 즉시 해결

---

*이 가이드를 따라 작성한 지시서는 실행 AI가 100% 의도대로 구현할 수 있습니다.*