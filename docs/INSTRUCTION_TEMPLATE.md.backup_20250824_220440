# 🎯 AI 개발 지시서 작성 가이드 v16.1

**📌 이 문서의 목적**: 개발 지식이 없는 사용자의 요청을 받은 AI가, 다른 AI에게 전달할 **명확하고 품질이 보증된 지시서를 작성하는 방법**을 안내합니다.

**🤖 당신(AI)의 역할**: 
1. 사용자의 의도를 정확히 파악
2. 프로젝트 구조를 이해
3. 필요한 파일과 정보를 찾아서
4. 실행 AI가 100% 의도대로 구현할 수 있는 지시서 작성
5. 사용자 경험을 검증할 수 있는 테스트 시나리오 포함
6. **🆕 프로젝트 특화 규칙을 Context 없는 AI에게 전달** (v13)
7. **🆕 SuperClaude 명령어를 최상단에 배치** (v14)
8. **🆕 대규모 작업은 폴더 구조로 체계적 관리** (v15)
9. **🆕 임시방편 절대 금지 - 문제 발견 시 즉시 해결** (v16)
10. **🆕 작성된 지시서를 tasks 폴더에 체계적으로 저장** (v16.1)

---

## 🚨 v16.1 핵심 개선사항: 완전성과 체계성의 통합 + 저장 가이드

### 🎯 지시서 작성 시 명령어 위치 (v14 필수)

**모든 지시서는 다음 형식으로 시작해야 합니다:**

```markdown
/sc:[command] --[flags]
"[구체적 실행 지시]"

# [지시서 제목]

## 🚨 프로젝트 특화 규칙 확인 (필수)
⚠️ **경고**: 아래 문서 미확인 시 프로젝트 파괴 가능성 90%
[이하 내용...]
```

**❌ 잘못된 예시 (v13 이전 방식):**
```markdown
# [지시서 제목]

## 🚨 프로젝트 특화 규칙 확인 (필수)
[중간 내용...]

## 🚀 추천 실행 명령어  ← 중간에 위치 (잘못됨)
/sc:[command] --[flags]
```

**✅ 올바른 예시 (v14 방식):**
```markdown
/sc:troubleshoot --seq --validate --think
"컬렉션 401 에러 처리 수정"

# 버그 수정 지시서: 컬렉션 401 에러 처리

## 🚨 프로젝트 특화 규칙 확인 (필수)
[이하 내용...]
```

### 📂 폴더 구조 결정 기준 (v15-16 필수)

**단일 파일 vs 폴더 구조 결정 기준:**

```markdown
| 기준 | 단일 파일 | 폴더 구조 (필수) |
|------|-----------|------------------|
| Phase 수 | < 3개 | ≥ 3개 |
| 작업 시간 | < 2시간 | ≥ 2시간 |
| 파일 수 | < 10개 | ≥ 10개 |
| 코드 라인 | < 500줄 | ≥ 500줄 |
| 세션 횟수 | 1회 | 여러 세션 |
```

**대규모 작업 시 필수 폴더 구조:**

```
docs/
└── [project-name]/              # 프로젝트 전용 폴더
    ├── README.md                # 전체 개요 및 진입점 (필수)
    ├── PHASE_1_[NAME].md       # Phase 1 상세
    ├── PHASE_2_[NAME].md       # Phase 2 상세
    ├── PHASE_3_[NAME].md       # Phase 3 상세
    └── ...
```

**폴더명 규칙:**
- 소문자 케밥 케이스: `tools-optimization`, `security-enhancement`
- 명확한 목적 표현
- 날짜 미포함 (README에서 관리)

**파일명 규칙:**
```
PHASE_[번호]_[핵심작업명].md
```
- 번호: 실행 순서 (1, 2, 3...)
- 핵심작업명: 대문자 스네이크 케이스
- 예: `PHASE_1_IMMEDIATE_CLEANUP.md`

---

## 🌉 CONTEXT_BRIDGE 필수 확인 (v13 계승)

**모든 지시서는 SuperClaude 명령어 다음으로 시작해야 합니다:**

```markdown
## 🚨 프로젝트 특화 규칙 확인 (필수)
⚠️ **경고**: 아래 문서 미확인 시 프로젝트 파괴 가능성 90%

### 최우선 확인 문서
- [ ] `/docs/CONTEXT_BRIDGE.md` - 프로젝트 특화 규칙 (전체 읽기 필수)
- [ ] `/CLAUDE.md` 17-43행 - 자동 스크립트 절대 금지
- [ ] `/CLAUDE.md` 352-410행 - Supabase 클라이언트 패턴

### 작업 전 검증 명령어
```bash
# 최신 패턴 확인
grep -r "createSupabaseServerClient" src/

# 금지 패턴 검사
grep -r "createServerComponentClient" src/  # 0개여야 함

# 자동 스크립트 존재 확인
ls scripts/fix-*.js 2>/dev/null  # 없어야 함
```
```

---

## 🆕 지시서 표준 템플릿 (v16 완전 통합)

### 📄 단일 파일 템플릿 (간단한 작업)

**모든 지시서는 다음 구조를 필수로 포함해야 합니다:**

```markdown
/sc:[command] --[flags]
"[구체적 실행 지시]"

# [지시서 제목]

## 🚨 프로젝트 특화 규칙 확인 (필수)
⚠️ **경고**: 아래 문서 미확인 시 프로젝트 파괴 가능성 90%

### 최우선 확인 문서
- [ ] `/docs/CONTEXT_BRIDGE.md` - 프로젝트 특화 규칙 (전체 읽기 필수)
- [ ] [작업 관련 필수 문서 추가]

### 프로젝트 금지사항 체크 ✅
- [ ] 자동 변환 스크립트 생성 금지
- [ ] 구식 Supabase 패턴 사용 금지
- [ ] database.generated.ts 직접 import 금지
- [ ] any 타입 사용 금지
- [ ] fetch() 직접 호출 금지

## 📚 온보딩 섹션 (필수)
### 필수 읽기 문서
- [ ] `/docs/CONTEXT_BRIDGE.md` - 전체 내용 필수
- [ ] `/CLAUDE.md` - AI 작업 지침 (특정 행 번호 명시)
- [ ] `/docs/[관련문서].md` - [읽어야 할 이유]

### 프로젝트 컨텍스트
```bash
# 기술 스택 확인
cat package.json | grep -A 5 "dependencies"

# 프로젝트 구조 확인
ls -la src/

# 최신 변경사항 확인
cat /docs/PROJECT.md | grep -A 10 "최근 변경"
```

### 작업 관련 핵심 정보
- 프레임워크: Next.js 15.4.6 (App Router)
- 데이터베이스: Supabase
- 스타일링: Tailwind CSS (다른 방식 금지)
- 인증: Supabase Auth (getUser() 사용)
- [작업에 필요한 추가 정보]

## 📌 목적
[지시서의 목적 설명]

## 🤖 실행 AI 역할
[AI가 수행할 역할 명세]

[이하 6단계 프로세스...]
```

### 📂 폴더 구조 템플릿 (대규모 작업)

#### **README.md (필수 진입점)**

```markdown
# 🎯 [프로젝트명]

## 📌 프로젝트 개요
[프로젝트 목적과 범위]

## 📊 현재 진행 상황
| Phase | 작업 내용 | 예상 시간 | 상태 | 시작일 | 완료일 |
|-------|----------|-----------|------|--------|--------|
| Phase 1 | [작업명] | [시간] | ⏳ 대기 | - | - |
| Phase 2 | [작업명] | [시간] | ⏳ 대기 | - | - |

## 🚀 빠른 시작 가이드
1. Phase 1부터 순차적 진행
2. 각 Phase 완료 조건 확인
3. 문제 발생 시 롤백 가이드 참조

## 📋 Phase 간 의존성
```
Phase 1 (독립적)
    ↓
Phase 2 (Phase 1 완료 필수)
    ↓
Phase 3 (Phase 2 완료 권장)
```

## 🔄 롤백 계획
[전체 롤백 절차]

## 📊 전체 성과 측정
| 지표 | 시작 | 목표 | 현재 | 달성률 |
|------|------|------|------|--------|
| [지표1] | [값] | [값] | [값] | [%] |
```

#### **PHASE_N_[NAME].md (개별 Phase)**

```markdown
/sc:[command] --[phase-specific-flags]
"Phase [N]: [구체적 작업]"

# Phase [N]: [Phase 제목]

## 🚨 프로젝트 특화 규칙 확인 (필수)
[표준 체크리스트]

## 📌 Phase 정보
- **Phase 번호**: [N]/[전체]
- **선행 조건**: Phase [N-1] 완료
- **예상 시간**: [X]시간
- **우선순위**: [CRITICAL/HIGH/MEDIUM/LOW]
- **작업 범위**: [파일 수]개 파일, [라인 수]줄

## 🎯 Phase 목표
1. [구체적 목표 1]
2. [구체적 목표 2]
3. [구체적 목표 3]

## 📚 온보딩 섹션
### 이 Phase에 필요한 지식
- [ ] [관련 문서 1]
- [ ] [관련 문서 2]

### 작업 파일 경로
- [경로 1]: [용도]
- [경로 2]: [용도]

## 📝 작업 내용
[상세 작업 단계]

## 📋 QA 테스트 시나리오
### 정상 플로우
[테스트 시나리오]

### 실패 시나리오
[예외 처리 테스트]

### 성능 측정
[벤치마크 기준]

## ✅ Phase 완료 조건 (기능 작동 필수)
- [ ] **기능 완전 작동** - 빌드 성공이 아닌 실제 동작 확인
- [ ] **DB 테이블 존재** - 필요한 모든 테이블 생성 및 CRUD 가능
- [ ] **API 실제 테스트** - Postman/curl로 실제 호출 성공
- [ ] **프론트엔드 표시** - 화면에서 데이터 정상 표시
- [ ] **에러 처리 구현** - 예외 상황 처리 완료
- [ ] **타입 안정성** - any 타입 0개, TypeScript 에러 0개
- [ ] 모든 테스트 통과
- [ ] 문서 업데이트 완료

## 🔄 롤백 절차
```bash
# Phase [N] 롤백
[구체적 롤백 명령어]
```

## → 다음 Phase
- **파일**: PHASE_[N+1]_[NAME].md
- **선행 조건**: 이 Phase의 모든 완료 조건 충족
```

---

## 🚫 절대 금지사항 (Claude Code 나쁜 습관)

1. **추측하지 마세요** → 실제 파일을 확인하고 작성하세요
2. **대충 넘기지 마세요** → 모든 단계를 구체적으로 작성하세요
3. **추상적으로 쓰지 마세요** → "[파일 경로]"가 아니라 실제 경로를 찾아 쓰세요
4. **생략하지 마세요** → "..." 대신 전체 코드를 포함하세요
5. **거짓말하지 마세요** → 모르면 "확인 필요"라고 쓰세요
6. **🆕 프로젝트 특화 규칙을 무시하지 마세요** → CONTEXT_BRIDGE.md 반드시 확인
7. **🆕 명령어를 중간에 넣지 마세요** → SuperClaude 명령어는 항상 최상단 (v14)
8. **🆕 대규모 작업을 단일 파일로 만들지 마세요** → 폴더 구조 사용 (v15)
9. **🔥 임시방편으로 회피하지 마세요** → 문제 발견 시 즉시 해결 (v16)
   - ❌ 주석 처리하고 "해결 완료"라고 하기
   - ❌ TODO 남기고 넘어가기
   - ❌ 빈 배열/null 반환하고 마치 정상인 것처럼 처리
   - ❌ any 타입으로 회피하고 "타입 수정 완료"
   - ✅ 올바른 해결: 문제의 근본 원인을 찾아 완전히 해결

---

## 📋 지시서 작성 7단계 프로세스 (v16 강화)

### Step 0: SuperClaude 명령어 결정 & 프로젝트 학습 (v16 강화)

#### 0.1 작업 규모 평가 및 구조 결정 (v15-16 통합)

```markdown
**구조 결정 체크리스트:**
- [ ] Phase 수 계산 (3개 이상 → 폴더 구조)
- [ ] 예상 작업 시간 (2시간 이상 → 폴더 구조)
- [ ] 영향 파일 수 (10개 이상 → 폴더 구조)
- [ ] 세션 횟수 (여러 세션 → 폴더 구조)

**결정: [ ] 단일 파일  [ ] 폴더 구조**

**폴더 구조 선택 시:**
1. 프로젝트 폴더명 결정: `[project-name]/`
2. Phase 수 결정: [N]개
3. 각 Phase 이름 결정
```

#### 0.2 작업 유형별 명령어 매핑

```markdown
| 작업 유형 | 추천 명령어 | 필수 플래그 | 선택 플래그 |
|---------|------------|------------|------------|
| 버그 수정 | /sc:troubleshoot | --seq --validate | --think |
| UI 개선 | /sc:improve | --magic --c7 | --validate |
| 기능 추가 | /sc:implement | --seq --validate | --c7 --think |
| 검증/감사 | /sc:analyze | --seq --validate | --ultrathink --delegate |
| 리팩토링 | /sc:improve | --seq --think | --validate |
| 문서 작성 | /sc:document | --persona-scribe | --c7 |

**복잡도 기반 플래그 선택:**
- Simple (< 3 파일): `--validate`
- Moderate (3-10 파일): `--seq --think --validate`
- Complex (> 10 파일): `--seq --ultrathink --delegate files --validate`
- Enterprise (전체 시스템): `--seq --ultrathink --all-mcp --wave-mode`
```

#### 0.3 프로젝트 컨텍스트 학습 (v13 필수)

```bash
# 1. 프로젝트 특화 규칙 확인 (v13 신규)
cat /docs/CONTEXT_BRIDGE.md  # 전체 내용 필수 확인

# 2. 핵심 문서 확인
cat /CLAUDE.md | head -100  # AI 작업 지침
cat /docs/PROJECT.md | grep -A 10 "현재"  # 프로젝트 현황
cat /docs/CODEMAP.md | head -50  # 프로젝트 구조

# 3. 최신 변경사항 확인 (v13 필수)
cat /docs/PROJECT.md | grep -A 10 "최근 변경"
cat /docs/CONTEXT_BRIDGE.md | grep -A 20 "최신 변경"

# 4. 기술 스택 파악
cat package.json | grep -A 10 "dependencies"
cat tsconfig.json | grep -A 5 "compilerOptions"

# 5. 작업 영역 구조 확인
ls -la src/app/(pages)/[작업영역]/
ls -la src/components/[관련폴더]/
ls -la src/app/api/[관련API]/

# 6. 타입 시스템 확인
cat src/types/index.ts | grep "export"
```

#### 0.4 온보딩 섹션 자동 생성 (v14 강화)

```markdown
## 📚 온보딩 섹션 (실행 AI 필수 학습)

### 🚨 프로젝트 특화 규칙 (v13 필수)
- [ ] `/docs/CONTEXT_BRIDGE.md` 전체 - 프로젝트 특화 규칙
- [ ] 최신 변경사항 확인 (2025-08-22 Supabase 패턴 변경 등)
- [ ] 자동 스크립트 금지 규칙 확인
- [ ] 타입 시스템 규칙 확인

### 필수 읽기 문서
- [ ] `/CLAUDE.md` 10-71행 - AI 필수 수칙 및 금지사항
- [ ] `/CLAUDE.md` 143-302행 - TypeScript 타입 관리 시스템
- [ ] `/CLAUDE.md` 352-410행 - Supabase 클라이언트 패턴
- [ ] `/docs/PROJECT.md` - 현재 이슈 및 주의사항
- [ ] `/docs/[작업관련].md` - [구체적 이유]

### 작업 전 필수 확인
```bash
# 1. 프로젝트 특화 규칙 검증
grep -r "createServerComponentClient" src/  # 0개여야 함
grep -r "from '@/types/database'" src/  # 0개여야 함
grep -r ": any" src/ --include="*.ts"  # 0개여야 함

# 2. 빌드 상태 확인
npm run build

# 3. 타입 체크
npm run types:check

# 4. 관련 테이블 확인
node scripts/verify-with-service-role.js | grep [테이블명]
```

### 작업 관련 경로
- 페이지: `src/app/(pages)/[경로]/page.tsx`
- 컴포넌트: `src/components/[경로]/`
- API: `src/app/api/[경로]/route.ts`
- 타입: `src/types/index.ts`
```

### Step 1: 사용자 요청 분석 (Understanding)

**이렇게 분석하세요:**
```markdown
사용자 요청: "배포 사이트 /tools/youtube-lens 컬렉션 버그"

분석 결과:
- 문제 위치: /tools/youtube-lens 페이지
- 문제 기능: 컬렉션 (collections)
- 문제 유형: 버그 (동작 오류)
- 추가 정보 필요: 구체적인 버그 증상
- 작업 규모: [Simple/Moderate/Complex/Enterprise]
- 구조 결정: [단일 파일/폴더 구조]
```

### Step 2: 프로젝트 구조 파악 (Discovery)

**이렇게 찾으세요:**
```bash
# 1. 페이지 파일 찾기
ls -la src/app/(pages)/tools/youtube-lens/
# → page.tsx, layout.tsx 등 확인

# 2. 관련 컴포넌트 찾기
grep -r "collection" src/app/(pages)/tools/youtube-lens/ --include="*.tsx"
# → CollectionList.tsx, CollectionCard.tsx 등 발견

# 3. API 라우트 찾기
ls -la src/app/api/youtube/
# → collections/route.ts 확인

# 4. 타입 정의 찾기
grep -r "Collection" src/types/ --include="*.ts"
# → Collection 타입 정의 위치 확인
```

### Step 3: 필수 확인 사항 정리 (Gathering) - v13 강화

**이렇게 정리하세요:**
```markdown
필수 확인 파일 (실제 경로):
1. 프로젝트 특화 규칙: /docs/CONTEXT_BRIDGE.md (v13 필수)
2. 페이지: src/app/(pages)/tools/youtube-lens/page.tsx
3. 컴포넌트: src/components/youtube/CollectionList.tsx
4. API: src/app/api/youtube/collections/route.ts
5. 타입: src/types/index.ts (Collection 타입)
6. 에러 처리: docs/ERROR_BOUNDARY.md 45-67행 (401 처리)

금지사항 체크:
- [ ] 자동 스크립트 생성하지 않음
- [ ] 올바른 Supabase 패턴 사용
- [ ] @/types에서만 import
- [ ] any 타입 사용하지 않음
- [ ] 임시방편 해결책 사용하지 않음 (v16)
```

### Step 4: 실행 단계 작성 (Planning) - v16 강화

**폴더 구조 사용 시 (v15-16):**
```markdown
Phase 분할 계획:
1. Phase 1: [작업명] - [시간]
   - 파일: PHASE_1_[NAME].md
   - 범위: [N]개 파일
   
2. Phase 2: [작업명] - [시간]
   - 파일: PHASE_2_[NAME].md
   - 범위: [N]개 파일

의존성: Phase 1 → Phase 2 → Phase 3
```

**단일 파일 사용 시:**
```markdown
실행 단계 (구체적 행동):

0. 프로젝트 특화 규칙 확인 (v13 필수)
   - 파일: /docs/CONTEXT_BRIDGE.md
   - 확인: 전체 내용 숙지, 특히 금지사항

1. 버그 재현 및 확인
   - 파일: src/app/(pages)/tools/youtube-lens/page.tsx
   - 확인: 72-85행의 useEffect에서 컬렉션 데이터 로드
   - 문제: 401 에러 시 로그인 페이지로 리다이렉트

2. 원인 수정
   - 파일: src/components/youtube/CollectionList.tsx  
   - 수정: 34행의 에러 처리 로직
   - 변경 전: if (error.status === 401) router.push('/login')
   - 변경 후: if (error.status === 401) setShowLoginModal(true)

3. API 응답 확인
   - 파일: src/app/api/youtube/collections/route.ts
   - 확인: 15-23행의 인증 체크 로직
   - 패턴: createRouteHandlerClient 사용 (구식 패턴 금지)
   - 수정: 인증 실패 시 적절한 에러 메시지 반환
```

### Step 5: 검증 기준 작성 (Validation) - v16 강화

**이렇게 작성하세요:**
```markdown
성공 기준 (구체적 테스트):
1. 프로젝트 특화 규칙 준수
   - [ ] 자동 스크립트 없음
   - [ ] 올바른 Supabase 패턴 사용
   - [ ] 타입 시스템 준수
   - [ ] 임시방편 해결책 없음 (v16)
2. 기능 테스트
   - 로그인 상태: 컬렉션 목록이 정상 표시
   - 로그아웃 상태: 로그인 모달 표시 (페이지 이동 X)
   - API 테스트: curl http://localhost:3000/api/youtube/collections
   - 콘솔 에러: 없음
3. 기능 완전 작동 확인 (v16)
   - [ ] 실제 기능이 동작하는지 확인
   - [ ] 빌드 성공만으로 만족하지 않음
```

### Step 6: QA 테스트 시나리오 작성 (User Experience Testing)

#### 6.1 사용자 플로우 테스트

```markdown
## 핵심 사용자 시나리오

### 정상 플로우 (Happy Path)
1. **시작 상태**: 로그인 완료
2. **사용자 행동 순서**:
   - Step 1: /tools/youtube-lens 페이지 접속
   - Step 2: 컬렉션 탭 클릭
   - Step 3: 새 컬렉션 생성 버튼 클릭
   - Step 4: 컬렉션 이름 입력 "테스트 컬렉션"
   - Step 5: 저장 버튼 클릭
3. **검증 포인트**:
   ✅ 컬렉션 목록에 새 항목 표시
   ✅ 성공 토스트 메시지 표시
   ✅ 3초 이내 응답

### 실패 시나리오 테스트
1. **세션 만료**: 401 에러 → 로그인 모달 표시
2. **네트워크 장애**: 타임아웃 → 재시도 버튼 표시
3. **중복 이름**: 409 에러 → "이미 존재하는 이름" 알림
```

#### 6.2 엣지 케이스 체크리스트

```markdown
### 입력값 경계 테스트
| 테스트 항목 | 입력값 | 예상 결과 | 실제 결과 |
|------------|--------|-----------|-----------|
| 빈 입력 | "" | "필수 입력" 에러 | ☐ |
| 최소 길이 | 1자 | 통과 | ☐ |
| 최대 길이 | 255자 | 통과 | ☐ |
| 초과 길이 | 256자 | "길이 초과" 에러 | ☐ |
| 특수문자 | <script> | XSS 방지 처리 | ☐ |
| 이모지 | 😀 | 정상 저장 | ☐ |
| SQL Injection | '; DROP TABLE-- | 정화 처리 | ☐ |

### 동시성 테스트
☐ 더블 클릭 방지 (디바운싱)
☐ 연속 API 요청 중복 방지
☐ 다중 탭 세션 동기화
☐ 동시 수정 충돌 해결
```

#### 6.3 성능 & 접근성 기준 (업계 표준)

```markdown
### 성능 벤치마크 (Core Web Vitals)
⚡ LCP (Largest Contentful Paint): < 2.5s
⚡ FID (First Input Delay): < 100ms  
⚡ CLS (Cumulative Layout Shift): < 0.1
⚡ API 응답 시간: < 500ms (p95)

### 접근성 체크 (WCAG 2.1 AA)
♿ 키보드 네비게이션: Tab 순서 논리적
♿ 스크린 리더: ARIA 레이블 완성도 100%
♿ 색상 대비: 4.5:1 이상 (일반 텍스트)
♿ 포커스 표시: 명확한 시각적 피드백

### 크로스 브라우저 테스트
| 브라우저 | Windows | Mac | Mobile |
|---------|---------|-----|--------|
| Chrome 120+ | ☐ | ☐ | ☐ |
| Safari 17+ | N/A | ☐ | ☐ |
| Firefox 120+ | ☐ | ☐ | N/A |
| Edge 120+ | ☐ | ☐ | N/A |
```

#### 6.4 회귀 테스트 범위

```markdown
### 영향 범위 분석
☑ 수정된 컴포넌트를 사용하는 다른 페이지
☑ 동일한 API를 호출하는 다른 기능
☑ 상태 관리에 의존하는 연관 기능
☑ 라우팅 로직 변경 영향

### 회귀 테스트 항목
1. 기존 컬렉션 CRUD 동작
2. 다른 인증 필요 기능들
3. 모달 시스템 전체
4. 에러 바운더리 동작
```

---

## 🎯 케이스별 상세 작성 가이드 (v16 완전판)

### 1️⃣ 버그 수정 지시서 작성법

#### 사용자 요청 예시:
"컬렉션 클릭하면 로그인 페이지로 가버려"

#### 지시서 작성 과정:

**0. SuperClaude 명령어 최상단 배치 (v14):**
```markdown
/sc:troubleshoot --seq --validate --think
"컬렉션 401 에러 처리 버그 수정"

# 버그 수정 지시서: 컬렉션 401 에러 처리

## 🚨 프로젝트 특화 규칙 확인 (필수)
⚠️ **경고**: 아래 문서 미확인 시 프로젝트 파괴 가능성 90%

### 최우선 확인 문서
- [ ] `/docs/CONTEXT_BRIDGE.md` - 프로젝트 특화 규칙 (전체 읽기)
- [ ] `/CLAUDE.md` 448-498행 - 인증 프로토콜
- [ ] `/docs/ERROR_BOUNDARY.md` - 401 에러 처리 패턴

### 프로젝트 금지사항 체크
- [ ] 자동 변환 스크립트 생성 금지
- [ ] createServerComponentClient 사용 금지
- [ ] getSession() 사용 금지
- [ ] 임시방편 해결책 사용 금지 (v16)
```

**1. 먼저 관련 파일 찾기:**
```bash
# 컬렉션 관련 파일 모두 찾기
find src -name "*collection*" -o -name "*Collection*"

# 컬렉션 관련 코드 검색
grep -r "collection" src --include="*.tsx" --include="*.ts"

# API 라우트 확인
ls -la src/app/api/youtube/collections/
```

**2. 버그 위치 특정:**
```markdown
발견한 파일들:
- src/app/(pages)/tools/youtube-lens/page.tsx (메인 페이지)
- src/components/youtube/CollectionList.tsx (컬렉션 목록 컴포넌트)
- src/app/api/youtube/collections/route.ts (API)
```

**3. 완성된 지시서:**
```markdown
/sc:troubleshoot --seq --validate --think
"컬렉션 401 에러 처리 버그 수정"

# 버그 수정 지시서: 컬렉션 401 에러 처리

## 🚨 프로젝트 특화 규칙 확인 (필수)
⚠️ **경고**: 아래 문서 미확인 시 프로젝트 파괴 가능성 90%

### 최우선 확인 문서
- [ ] `/docs/CONTEXT_BRIDGE.md` - 프로젝트 특화 규칙 (전체 읽기)
- [ ] `/CLAUDE.md` 448-498행 - 인증 프로토콜 v2.0
- [ ] `/CLAUDE.md` 54-71행 - 절대 금지사항
- [ ] `/docs/ERROR_BOUNDARY.md` - 401 에러 처리 표준

### 프로젝트 금지사항 체크 ✅
- [ ] 자동 스크립트 생성 금지
- [ ] createServerComponentClient 사용 금지  
- [ ] getSession() 사용 금지
- [ ] any 타입 사용 금지
- [ ] fetch() 직접 호출 금지
- [ ] 임시방편 해결책 사용 금지 (v16)

## 📚 온보딩 섹션
### 프로젝트 컨텍스트
```bash
# 인증 패턴 확인
grep -r "createRouteHandlerClient" src/app/api --include="*.ts"

# 현재 401 처리 패턴
grep -r "401" src/components --include="*.tsx"
```

### 문제 상황
- 위치: /tools/youtube-lens 페이지의 컬렉션 섹션
- 증상: 로그아웃 상태에서 컬렉션 클릭 시 로그인 페이지로 강제 이동
- 원인: 401 에러 처리가 페이지 리다이렉트로 구현됨

### 수정 파일 및 내용

1. **src/components/youtube/CollectionList.tsx**
   - 34행: 에러 처리 수정
   ```typescript
   // 수정 전
   if (error.status === 401) {
     router.push('/login');
   }
   
   // 수정 후  
   if (error.status === 401) {
     setShowLoginModal(true); // 모달 표시로 변경
   }
   ```

2. **src/app/(pages)/tools/youtube-lens/page.tsx**
   - 12행: 로그인 모달 상태 추가
   ```typescript
   const [showLoginModal, setShowLoginModal] = useState(false);
   ```
   - 156행: 모달 컴포넌트 추가
   ```typescript
   {showLoginModal && <LoginModal onClose={() => setShowLoginModal(false)} />}
   ```

### QA 테스트 시나리오

#### 사용자 플로우 테스트
1. 로그아웃 상태로 /tools/youtube-lens 접속
2. 컬렉션 섹션 클릭
3. **예상**: 로그인 모달 표시 (페이지 이동 ❌)
4. 로그인 진행
5. **예상**: 원래 작업 계속 가능

#### 엣지 케이스
- 로그인 중 취소 → 모달만 닫힘
- 잘못된 인증 → 에러 메시지 표시
- 세션 만료 중간 → 자동 감지 및 모달 표시

#### 회귀 테스트
☑ 로그인 상태에서 정상 동작
☑ 다른 401 처리 영향 없음
☑ 페이지 라우팅 정상

### 성공 기준
☑ 로그인 모달 정상 표시
☑ 페이지 이동 없음
☑ 로그인 후 컬렉션 정상 접근
☑ 성능: 모달 표시 < 100ms
☑ 자동 스크립트 없음
☑ 올바른 Supabase 패턴 사용
☑ 임시방편 해결책 없음 (v16)
```

---

### 2️⃣ UI 개선 지시서 작성법 (v14)

#### 사용자 요청 예시:
"메인 페이지 캐러셀 크기를 Fast Campus 사이트처럼 개선해줘"

#### 지시서 작성 과정:

**0. SuperClaude 명령어 최상단 배치 (v14):**
```markdown
/sc:improve --magic --c7 --validate
"메인 캐러셀 크기 Fast Campus 스타일로 개선"

# UI 개선 지시서: 메인 캐러셀 크기 조정
```

**1. 현재 구현 확인:**
```bash
# 메인 페이지 찾기
cat src/app/page.tsx | grep -A 10 -B 10 "carousel"

# 캐러셀 컴포넌트 찾기
find src/components -name "*carousel*" -o -name "*Carousel*"
```

**2. 참조 사이트 분석 방법 안내:**
```markdown
Fast Campus 사이트 분석:
1. https://fastcampus.co.kr 접속
2. 개발자 도구 (F12) 열기
3. 메인 캐러셀 요소 검사
4. 크기 확인: height: 480px, aspect-ratio: 16/9
```

**3. 완성된 지시서:**
```markdown
/sc:improve --magic --c7 --validate
"메인 캐러셀 크기 Fast Campus 스타일로 개선"

# UI 개선 지시서: 메인 캐러셀 크기 조정

## 🚨 프로젝트 특화 규칙 확인 (필수)
⚠️ **경고**: 아래 문서 미확인 시 프로젝트 파괴 가능성 90%

### 최우선 확인 문서
- [ ] `/docs/CONTEXT_BRIDGE.md` - 프로젝트 특화 규칙
- [ ] `/CLAUDE.md` 68-71행 - 스타일링 규칙 (Tailwind CSS만)
- [ ] `/src/components/CLAUDE.md` - 구현된 컴포넌트 목록

### 프로젝트 금지사항 체크 ✅
- [ ] styled-components 사용 금지
- [ ] CSS 모듈 사용 금지  
- [ ] 인라인 스타일 사용 금지
- [ ] Tailwind CSS만 사용

## 📚 온보딩 섹션
### 프로젝트 컨텍스트
```bash
# 현재 캐러셀 구현 확인
cat src/components/HeroCarousel.tsx | head -50

# Tailwind 설정 확인
cat tailwind.config.js | grep -A 5 "theme"

# 스타일링 금지사항 확인
grep -r "styled-components" src/  # 0개여야 함
```

### 개선 목표
- 현재: height: 300px (너무 작음)
- 목표: height: 480px, aspect-ratio: 16/9 (Fast Campus 스타일)

### 수정 파일 및 내용

1. **src/components/HeroCarousel.tsx**
   - 23행: 높이 스타일 수정
   ```typescript
   // 수정 전
   <div className="h-[300px] w-full">
   
   // 수정 후
   <div className="h-[480px] w-full aspect-video">
   ```

2. **src/app/page.tsx**
   - 45행: 캐러셀 섹션 패딩 조정
   ```typescript
   // 수정 전
   <section className="py-8">
   
   // 수정 후
   <section className="py-12">
   ```

### 반응형 처리
```typescript
// src/components/HeroCarousel.tsx 25행 추가
<div className="h-[320px] md:h-[400px] lg:h-[480px] w-full aspect-video">
```

### QA 테스트 시나리오

#### 반응형 테스트
| 해상도 | 높이 | 레이아웃 | 성능 |
|--------|------|----------|------|
| 320px (Mobile) | 320px | ☐ 정상 | ☐ < 3s |
| 768px (Tablet) | 400px | ☐ 정상 | ☐ < 2s |
| 1920px (Desktop) | 480px | ☐ 정상 | ☐ < 1s |

#### 크로스 브라우저
☐ Chrome: 애니메이션 부드러움
☐ Safari: 이미지 렌더링 정상
☐ Firefox: 종횡비 유지

#### 성능 측정
- LCP: < 2.5초 (이미지 로딩)
- CLS: < 0.1 (레이아웃 시프트 없음)
- 메모리: < 50MB 증가

### 성공 기준
☑ 모든 해상도에서 적절한 크기
☑ 이미지 비율 유지
☑ 부드러운 전환 애니메이션
☑ 성능 저하 없음
☑ Tailwind CSS만 사용
☑ 자동 스크립트 없음
```

---

### 3️⃣ 기능 추가 지시서 작성법 (v14)

#### 사용자 요청 예시:
"마이페이지에 활동 내역 섹션 추가해줘"

#### 지시서 작성 과정:

**0. SuperClaude 명령어 최상단 배치 (v14):**
```markdown
/sc:implement --seq --validate --c7 --think
"마이페이지 활동 내역 기능 구현"

# 기능 추가 지시서: 마이페이지 활동 내역
```

**1. 기존 구조 파악:**
```bash
# 마이페이지 구조 확인
ls -la src/app/(pages)/mypage/

# 유사 기능 찾기 (참고용)
grep -r "activity" src --include="*.tsx"
grep -r "history" src --include="*.tsx"
```

**2. 필요한 요소 정리:**
```markdown
필요한 작업:
1. DB 테이블: user_activities (없으면 생성)
2. API 엔드포인트: /api/user/activities
3. 컴포넌트: ActivityHistory.tsx
4. 타입 정의: UserActivity
```

**3. 완성된 지시서:**
```markdown
/sc:implement --seq --validate --c7 --think
"마이페이지 활동 내역 기능 구현"

# 기능 추가 지시서: 마이페이지 활동 내역

## 🚨 프로젝트 특화 규칙 확인 (필수)
⚠️ **경고**: 아래 문서 미확인 시 프로젝트 파괴 가능성 90%

### 최우선 확인 문서
- [ ] `/docs/CONTEXT_BRIDGE.md` - 프로젝트 특화 규칙
- [ ] `/CLAUDE.md` 143-302행 - TypeScript 타입 관리 시스템
- [ ] `/CLAUDE.md` 303-371행 - 보안 자동 적용 규칙
- [ ] `/docs/DATA_MODEL.md` - 데이터베이스 구조

### 프로젝트 금지사항 체크 ✅
- [ ] database.generated.ts 직접 import 금지
- [ ] any 타입 사용 금지
- [ ] fetch() 직접 호출 금지
- [ ] getSession() 사용 금지
- [ ] 새 테이블 생성 시 즉시 RLS 적용
- [ ] 임시방편 해결책 사용 금지 (v16)

## 📚 온보딩 섹션
### 프로젝트 컨텍스트
```bash
# DB 테이블 확인
node scripts/verify-with-service-role.js | grep activities

# 타입 시스템 확인
cat src/types/index.ts | grep -A 5 "Activity"

# API 패턴 확인
cat src/app/api/user/profile/route.ts | head -30

# 인증 패턴 확인
grep -r "createRouteHandlerClient" src/app/api --include="*.ts"
```

### 작업 전 확인
- [ ] user_activities 테이블 존재 여부
- [ ] 기존 활동 관련 컴포넌트
- [ ] 인증 체크 패턴
- [ ] RLS 정책 적용 방법

### 추가할 기능
- 위치: /mypage 페이지
- 내용: 사용자의 최근 활동 내역 표시 (게시글, 댓글, 좋아요)

### 구현 단계

1. **타입 정의 추가**
   파일: src/types/index.ts
   ```typescript
   export interface UserActivity {
     id: string;
     type: 'post' | 'comment' | 'like';
     title: string;
     createdAt: string;
     targetId: string;
     targetTitle: string;
   }
   ```

2. **API 라우트 생성**
   파일: src/app/api/user/activities/route.ts (새 파일)
   ```typescript
   import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';
   import { cookies } from 'next/headers';
   import { NextResponse } from 'next/server';

   export async function GET() {
     const supabase = createRouteHandlerClient({ cookies });
     const { data: { user } } = await supabase.auth.getUser();
     
     if (!user) {
       return NextResponse.json(
         { error: 'User not authenticated' },
         { status: 401 }
       );
     }

     // 활동 내역 조회 로직
     const { data, error } = await supabase
       .from('user_activities')
       .select('*')
       .eq('user_id', user.id)
       .order('created_at', { ascending: false })
       .limit(20);

     if (error) {
       return NextResponse.json({ error: error.message }, { status: 500 });
     }

     return NextResponse.json({ activities: data });
   }
   ```

3. **컴포넌트 생성**
   파일: src/components/mypage/ActivityHistory.tsx (새 파일)
   ```typescript
   'use client';

   import { useEffect, useState } from 'react';
   import { apiGet } from '@/lib/api-client';
   import { UserActivity } from '@/types';
   import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';

   export function ActivityHistory() {
     const [activities, setActivities] = useState<UserActivity[]>([]);
     const [loading, setLoading] = useState(true);

     useEffect(() => {
       const fetchActivities = async () => {
         try {
           const data = await apiGet<{ activities: UserActivity[] }>('/api/user/activities');
           setActivities(data.activities);
         } catch (error) {
           console.error('Failed to fetch activities:', error);
         } finally {
           setLoading(false);
         }
       };

       fetchActivities();
     }, []);

     if (loading) {
       return <div>활동 내역을 불러오는 중...</div>;
     }

     return (
       <Card>
         <CardHeader>
           <CardTitle>최근 활동</CardTitle>
         </CardHeader>
         <CardContent>
           <div className="space-y-4">
             {activities.map((activity) => (
               <div key={activity.id} className="flex items-center justify-between">
                 <div>
                   <p className="font-medium">{activity.title}</p>
                   <p className="text-sm text-gray-500">{activity.createdAt}</p>
                 </div>
                 <span className="text-sm">{activity.type}</span>
               </div>
             ))}
           </div>
         </CardContent>
       </Card>
     );
   }
   ```

4. **마이페이지에 추가**
   파일: src/app/(pages)/mypage/page.tsx
   - import 추가 (상단):
   ```typescript
   import { ActivityHistory } from '@/components/mypage/ActivityHistory';
   ```
   - 컴포넌트 추가 (적절한 위치):
   ```typescript
   <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
     <ProfileSection />
     <ActivityHistory /> {/* 새로 추가 */}
   </div>
   ```

### DB 마이그레이션 (필요시)
파일: supabase/migrations/[timestamp]_user_activities.sql
```sql
CREATE TABLE IF NOT EXISTS user_activities (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  type VARCHAR(20) NOT NULL,
  title VARCHAR(255) NOT NULL,
  target_id UUID,
  target_title VARCHAR(255),
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- RLS 즉시 적용 (필수!)
ALTER TABLE user_activities ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view own activities" ON user_activities
  FOR SELECT USING (user_id = auth.uid());
```

### QA 테스트 시나리오

#### 기능 테스트
1. **빈 데이터**: 활동 없음 → "활동 내역이 없습니다" 표시
2. **데이터 로딩**: 스켈레톤 UI → 실제 데이터
3. **페이지네이션**: 20개 이상 → "더 보기" 버튼
4. **실시간 업데이트**: 새 활동 → 자동 갱신

#### 성능 테스트
| 데이터 개수 | 로딩 시간 | 메모리 사용 |
|------------|-----------|-------------|
| 0개 | < 100ms | 기준값 |
| 20개 | < 500ms | +5MB |
| 100개 | < 1s | +10MB |
| 1000개 | < 2s | +20MB |

#### 보안 테스트
☑ 타 사용자 데이터 접근 불가
☑ SQL Injection 방어
☑ XSS 방어
☑ CSRF 토큰 검증
☑ RLS 정책 적용

### 성공 기준
☑ 활동 내역 정상 표시
☑ 데이터 정확성 100%
☑ 응답 시간 < 500ms
☑ 에러 처리 완벽
☑ 자동 스크립트 없음
☑ 올바른 패턴 사용
☑ RLS 정책 적용
☑ 임시방편 해결책 없음 (v16)
```

---

## 📂 지시서 분할 가이드 (v16 완전 통합)

### 대규모 작업 시 Phase별 분할 방법

대규모 작업은 단일 지시서로 관리하기 어렵습니다. Phase별로 분할하여 체계적으로 관리하세요.

#### 분할 기준
```markdown
| 기준 | 단일 지시서 | 분할 필요 |
|------|------------|-----------|
| 파일 수 | < 10개 | ≥ 10개 |
| 코드 라인 | < 500줄 | ≥ 500줄 |
| 작업 시간 | < 2시간 | ≥ 2시간 |
| 복잡도 | Simple/Moderate | Complex/Enterprise |
| 의존성 | 독립적 | 상호 의존적 |
| Phase 수 | < 3개 | ≥ 3개 |
```

#### 폴더 구조 생성 (v15-16 필수)

**Phase가 3개 이상인 경우 필수 폴더 구조:**

```
docs/
└── [project-name]/              # 프로젝트 전용 폴더
    ├── README.md                # 전체 개요 및 진입점
    ├── PHASE_1_[NAME].md       # Phase 1 상세
    ├── PHASE_2_[NAME].md       # Phase 2 상세
    ├── PHASE_3_[NAME].md       # Phase 3 상세
    └── PHASE_4_[NAME].md       # Phase 4 상세
```

#### Phase별 분할 템플릿

```markdown
## 전체 작업 개요 문서 (README.md)
/sc:analyze --seq --ultrathink --wave-mode
"[전체 작업명] 분석 및 계획"

# [프로젝트명] 전체 재구축 계획

## 📋 전체 작업 범위
- 총 Phase 수: 4개
- 예상 소요 시간: 17시간
- 영향 범위: 265개 파일
- 우선순위: CRITICAL → HIGH → MEDIUM → LOW

## 🗓️ Phase별 로드맵
| Phase | 목표 | 시간 | 우선순위 | 의존성 |
|-------|------|------|----------|--------|
| Phase 1 | 긴급 안정화 | 1시간 | CRITICAL | 없음 |
| Phase 2 | 핵심 정리 | 4시간 | HIGH | Phase 1 |
| Phase 3 | 시스템 표준화 | 8시간 | MEDIUM | Phase 2 |
| Phase 4 | 품질 보증 | 4시간 | LOW | Phase 3 |

## 📊 예상 성과
[정량적/정성적 개선 효과]
```

#### 개별 Phase 지시서 템플릿

```markdown
/sc:[command] --[phase-specific-flags]
"Phase [N]: [구체적 작업]"

# Phase [N]: [Phase 제목]

## 🚨 프로젝트 특화 규칙 확인 (필수)
[표준 체크리스트]

## 📌 Phase 정보
- **Phase 번호**: [N]/[전체]
- **선행 조건**: Phase [N-1] 완료
- **예상 시간**: [X]시간
- **우선순위**: [CRITICAL/HIGH/MEDIUM/LOW]

## 🎯 Phase 목표
[구체적 목표 3-5개]

## 📝 작업 내용
[상세 작업 단계]

## ✅ Phase 완료 조건
- [ ] [검증 가능한 조건 1]
- [ ] [검증 가능한 조건 2]
- [ ] [검증 가능한 조건 3]
- [ ] **기능 완전 작동 확인** (v16)
- [ ] **임시방편 해결책 없음** (v16)

## 🔄 다음 Phase
→ Phase [N+1]: [다음 작업명]
```

#### Phase 간 전환 체크리스트

```markdown
### Phase 전환 전 확인사항
- [ ] 현재 Phase 모든 작업 완료
- [ ] 테스트 통과
- [ ] 문서 업데이트
- [ ] 다음 Phase 선행 조건 충족
- [ ] 롤백 포인트 생성
- [ ] **기능 완전 작동 확인** (v16)
- [ ] **임시방편 해결책 없음** (v16)
```

---

## 🔄 롤백 계획 템플릿 (v14 유지)

### 실패 시 복구 전략

모든 중요 작업은 롤백 계획을 포함해야 합니다.

#### 롤백 계획 섹션 템플릿

```markdown
## 🔄 롤백 계획

### 백업 체크리스트
- [ ] 데이터베이스 백업 생성
  ```bash
  pg_dump [database_url] > backup_$(date +%Y%m%d_%H%M%S).sql
  ```
- [ ] 코드 백업 브랜치 생성
  ```bash
  git checkout -b backup/$(date +%Y%m%d)
  git push origin backup/$(date +%Y%m%d)
  ```
- [ ] 환경 변수 백업
  ```bash
  cp .env .env.backup.$(date +%Y%m%d)
  ```

### 롤백 트리거 조건
| 조건 | 임계값 | 액션 |
|------|--------|------|
| 빌드 실패 | 3회 연속 | 즉시 롤백 |
| 에러율 증가 | >5% | 모니터링 후 결정 |
| 성능 저하 | >30% | 부분 롤백 |
| 보안 이슈 | Critical | 즉시 롤백 |

### 롤백 절차
1. **즉시 조치** (5분 이내)
   ```bash
   # 이전 버전으로 즉시 복구
   git revert HEAD
   git push origin main
   ```

2. **데이터 복구** (필요시)
   ```bash
   # 데이터베이스 복원
   psql [database_url] < backup_[timestamp].sql
   ```

3. **환경 복구**
   ```bash
   # 환경 변수 복원
   cp .env.backup.[date] .env
   npm run build
   ```

### 부분 롤백 전략
- **UI 변경만**: 컴포넌트 파일만 복구
- **API 변경만**: route.ts 파일만 복구
- **DB 스키마**: 마이그레이션 revert
- **설정 변경**: 설정 파일만 복구

### 롤백 후 조치
- [ ] 실패 원인 분석
- [ ] 포스트모템 작성
- [ ] 재시도 계획 수립
- [ ] 팀 공유 및 학습
```

---

## 📊 성과 측정 기준 강화 (v14 유지)

### 정량적 성과 측정 템플릿

```markdown
## 📊 성과 측정 기준

### 정량적 지표 (Before/After)
| 지표 | 현재 (Before) | 목표 (After) | 실제 (Actual) | 개선율 |
|------|---------------|--------------|---------------|--------|
| TypeScript 에러 | 88개 | 0개 | - | -100% |
| 빌드 시간 | 120초 | 60초 | - | -50% |
| 번들 크기 | 2.5MB | 1.5MB | - | -40% |
| API 응답 시간 | 800ms | 300ms | - | -62.5% |
| 테스트 커버리지 | 45% | 80% | - | +77.8% |
| Lighthouse 점수 | 72 | 95 | - | +31.9% |

### 정성적 지표
| 영역 | 현재 상태 | 목표 상태 | 검증 방법 |
|------|-----------|-----------|-----------|
| 개발자 경험 | 에러 디버깅에 시간 소모 | 빠른 개발 사이클 | 설문조사 |
| 코드 품질 | 일관성 없는 패턴 | 표준화된 패턴 | 코드 리뷰 |
| 유지보수성 | 수정 시 부수효과 발생 | 안전한 수정 | 회귀 테스트 |
| 보안 | 취약점 존재 | 보안 강화 | 보안 스캔 |

### 성과 검증 스크립트
```bash
# 자동 성과 측정
npm run measure:performance

# 상세 보고서 생성
npm run report:improvements

# Before/After 비교
npm run compare:metrics
```

### ROI 계산
```markdown
투자 시간: 17시간
절감 시간 (월): 40시간 (디버깅 시간 감소)
ROI: 235% (첫 달)
손익분기점: 0.43개월
```
```

---

## 🏢 Enterprise 레벨 가이드 (v13 유지 + v15-16 통합)

### 🌊 Wave Mode 활용 가이드

#### Wave Mode란?
- **정의**: 대규모 시스템 작업을 여러 단계(Wave)로 나누어 체계적으로 진행하는 오케스트레이션 방식
- **활성화 조건**: 복잡도 ≥0.7 AND 파일 >20 AND 작업 타입 >2
- **목적**: 복잡한 작업의 체계적 관리와 품질 보증

#### Wave Mode와 Phase 분할 연계 (v15-16)

**Wave Mode 사용 시 폴더 구조:**
```
docs/
└── enterprise-migration/
    ├── README.md
    ├── WAVE_1_DISCOVERY/
    │   ├── README.md
    │   ├── PHASE_1_ANALYSIS.md
    │   └── PHASE_2_ASSESSMENT.md
    ├── WAVE_2_PLANNING/
    │   ├── README.md
    │   └── PHASE_3_ARCHITECTURE.md
    └── WAVE_3_IMPLEMENTATION/
        ├── README.md
        ├── PHASE_4_CORE.md
        └── PHASE_5_INTEGRATION.md
```

#### Wave 전략 선택 가이드
```markdown
| 전략 | 사용 시나리오 | 특징 | 예시 |
|------|-------------|------|------|
| progressive | 점진적 개선 | 반복적 개선 | 성능 최적화, UX 개선 |
| systematic | 체계적 분석 | 철저한 검증 | 보안 감사, 코드 리뷰 |
| adaptive | 동적 대응 | 유연한 조정 | 레거시 마이그레이션 |
| enterprise | 대규모 작업 | 완전한 변환 | 시스템 재설계 |
```

#### Wave 구성 예시
```markdown
### Wave 1: Discovery & Analysis (발견 및 분석)
- 현재 상태 평가
- 문제점 식별
- 영향 범위 분석
- 리스크 평가

### Wave 2: Planning & Design (계획 및 설계)
- 솔루션 아키텍처
- 마이그레이션 전략
- 의존성 매핑
- 롤백 계획

### Wave 3: Implementation (구현)
- 핵심 기능 구현
- 점진적 롤아웃
- 단위 테스트 작성
- 통합 테스트

### Wave 4: Validation (검증)
- 성능 벤치마크
- 보안 스캔
- 사용자 수용 테스트
- 회귀 테스트

### Wave 5: Optimization (최적화)
- 성능 튜닝
- 리소스 최적화
- 모니터링 설정
- 문서화
```

### 📊 대규모 시스템 작업 예시

#### 1. 레거시 시스템 마이그레이션

```markdown
/sc:analyze --seq --ultrathink --all-mcp --wave-mode --wave-strategy enterprise
"레거시 jQuery 시스템을 React 18로 마이그레이션"

# 레거시 시스템 현대화 지시서

## 🚨 프로젝트 특화 규칙 확인 (필수)
⚠️ **경고**: 아래 문서 미확인 시 프로젝트 파괴 가능성 90%

### 최우선 확인 문서
- [ ] `/docs/CONTEXT_BRIDGE.md` - 프로젝트 특화 규칙
- [ ] `/docs/LEGACY_SYSTEM.md` - 현재 시스템 구조
- [ ] `/docs/MIGRATION_PLAN.md` - 마이그레이션 전략
- [ ] `/CLAUDE.md` - AI 작업 지침

### 프로젝트 범위
- 파일 수: 200+ 파일
- 코드 라인: 50,000+ 줄
- 영향 범위: 전체 시스템
- 예상 기간: 4-6주

## Wave 실행 계획

### Wave 1: 시스템 분석 (--wave-mode --systematic-waves)
```bash
# 의존성 분석
find . -name "*.js" | xargs grep -h "require\|import" | sort | uniq > dependencies.txt

# jQuery 사용 패턴 분석
grep -r "\$(" --include="*.js" | wc -l  # jQuery 호출 횟수
grep -r "\.ajax(" --include="*.js" > ajax_calls.txt  # AJAX 패턴

# 컴포넌트 후보 식별
find . -name "*.html" | xargs grep -l "data-component" > components.txt
```

### Wave 2: 아키텍처 설계 (--wave-mode --adaptive-waves)
- React 컴포넌트 구조 설계
- 상태 관리 전략 (Redux/Context)
- 라우팅 전략
- API 레이어 설계

### Wave 3: 점진적 마이그레이션 (--wave-mode --progressive-waves)
1. **Phase 1**: 공통 컴포넌트
   - Header, Footer, Navigation
   - 공통 UI 요소
   
2. **Phase 2**: 독립 페이지
   - About, Contact 등 정적 페이지
   - 의존성 낮은 기능
   
3. **Phase 3**: 핵심 기능
   - 사용자 인증
   - 주요 비즈니스 로직

### Wave 4: 통합 테스트 (--wave-mode --wave-validation)
- E2E 테스트 작성
- 성능 비교 테스트
- 브라우저 호환성
- 접근성 검증

### Wave 5: 최적화 및 배포 (--wave-mode --enterprise-waves)
- 번들 최적화
- 코드 스플리팅
- CDN 설정
- 모니터링 구축
```

#### 2. 마이크로서비스 전환

```markdown
/sc:analyze --seq --ultrathink --all-mcp --wave-mode --wave-strategy enterprise
"모놀리식 애플리케이션을 마이크로서비스로 전환"

# 마이크로서비스 전환 지시서

## 🚨 프로젝트 특화 규칙 확인 (필수)
[표준 체크리스트]

### 전환 범위
- 현재: 단일 Node.js 애플리케이션
- 목표: 8개 마이크로서비스
- 기술: Docker, Kubernetes, gRPC

## Wave별 실행 계획

### Wave 1: 도메인 분석 및 경계 설정
- DDD (Domain-Driven Design) 적용
- Bounded Context 식별
- 서비스 경계 정의
- 데이터 분리 전략

### Wave 2: 인프라 준비
- Docker 컨테이너화
- Kubernetes 클러스터 구성
- CI/CD 파이프라인
- 서비스 메시 설정

### Wave 3: 서비스 분리
1. **인증 서비스**: 사용자 관리, JWT
2. **상품 서비스**: 카탈로그, 재고
3. **주문 서비스**: 주문 처리, 결제
4. **알림 서비스**: 이메일, SMS
5. **분석 서비스**: 로그, 메트릭

### Wave 4: 통합 및 테스트
- API Gateway 구현
- 서비스 간 통신 테스트
- 분산 트랜잭션 처리
- 장애 복구 테스트

### Wave 5: 모니터링 및 최적화
- Prometheus/Grafana 설정
- 분산 추적 (Jaeger)
- 로그 집계 (ELK Stack)
- 성능 최적화
```

#### 3. 보안 강화 프로젝트

```markdown
/sc:analyze --seq --ultrathink --wave-mode --wave-strategy systematic --wave-validation
"전사 보안 강화 프로젝트"

# 보안 강화 프로젝트 지시서

## 🚨 프로젝트 특화 규칙 확인 (필수)
[표준 체크리스트]

### 보안 강화 범위
- OWASP Top 10 대응
- GDPR 컴플라이언스
- Zero Trust 아키텍처
- 침투 테스트 대비

## Wave별 실행 계획

### Wave 1: 보안 감사 및 평가
```bash
# 의존성 취약점 스캔
npm audit --audit-level=moderate
snyk test

# 코드 보안 스캔
semgrep --config=auto

# 비밀키 스캔
trufflehog filesystem .
```

### Wave 2: 즉시 조치 사항
- Critical 취약점 패치
- 하드코딩된 비밀키 제거
- SQL Injection 방어
- XSS 방어 구현

### Wave 3: 인증/인가 강화
- MFA (Multi-Factor Authentication)
- OAuth 2.0 / OIDC 구현
- RBAC (Role-Based Access Control)
- API Rate Limiting

### Wave 4: 데이터 보호
- 전송 중 암호화 (TLS 1.3)
- 저장 시 암호화 (AES-256)
- PII 마스킹
- 백업 암호화

### Wave 5: 모니터링 및 대응
- SIEM 구축
- 이상 탐지 시스템
- 사고 대응 플레이북
- 정기 보안 훈련
```

---

## 🔍 지시서 품질 검증 체크리스트 (v16 완전판)

**지시서 작성 완료 후 확인하세요:**

### 📁 지시서 저장 위치 가이드 (v16.1 신규)

**작성 완료된 지시서는 다음 위치에 저장:**

| 작업 유형 | 저장 위치 | 파일명 규칙 | 예시 |
|----------|----------|------------|------|
| 단일 작업 | `/tasks/[작업명].md` | 케밥-케이스 사용 | `tasks/add-user-profile.md` |
| 대규모 작업 | `/tasks/[프로젝트명]/README.md` | 폴더 구조로 관리 | `tasks/enterprise-migration/README.md` |
| Phase별 작업 | `/tasks/[프로젝트명]/PHASE_N_[이름].md` | Phase별 분리 | `tasks/migration/PHASE_1_BACKUP.md` |
| 긴급 버그 수정 | `/tasks/hotfix/[날짜]-[이슈].md` | YYYYMMDD 형식 | `tasks/hotfix/20250223-auth-error.md` |
| 기능 구현 | `/tasks/features/[기능명].md` | 기능별 분류 | `tasks/features/youtube-lens.md` |
| API 작업 | `/tasks/api/[엔드포인트].md` | API별 분류 | `tasks/api/collections-crud.md` |

**폴더 구조 예시:**
```
tasks/
├── add-user-profile.md              # 단일 작업
├── hotfix/
│   ├── 20250223-auth-error.md      # 긴급 수정
│   └── 20250224-api-timeout.md     # 긴급 수정
├── features/
│   ├── youtube-lens.md             # 기능 구현
│   └── video-analysis.md           # 기능 구현
├── api/
│   ├── collections-crud.md         # API 작업
│   └── auth-endpoints.md           # API 작업
└── enterprise-migration/            # 대규모 작업
    ├── README.md                    # 진입점 문서
    ├── PHASE_1_BACKUP.md           # Phase 1
    ├── PHASE_2_MIGRATION.md        # Phase 2
    └── PHASE_3_VALIDATION.md      # Phase 3
```

**저장 규칙:**
1. **즉시 저장**: 지시서 작성 완료 즉시 tasks 폴더에 저장
2. **버전 관리**: Git으로 버전 관리 (커밋 메시지: "docs: Add task instruction for [작업명]")
3. **상태 추적**: README.md에서 작업 진행 상태 업데이트
4. **참조 링크**: 관련 이슈나 PR 링크 포함

### 구조 결정 체크 (v15-16)
- ☐ **작업 규모 평가**: Phase 수, 시간, 파일 수 확인
- ☐ **구조 적절성**: 단일 파일 vs 폴더 구조 올바른 선택
- ☐ **폴더명 규칙**: 케밥 케이스, 명확한 목적
- ☐ **파일명 규칙**: PHASE_N_NAME.md 형식
- ☐ **README 완성도**: 전체 개요, 진행 상황, 의존성 명시

### 필수 요소 체크
- ☐ **SuperClaude 명령어 최상단**: 지시서 첫 줄에 위치 (v14 필수)
- ☐ **프로젝트 특화 규칙**: CONTEXT_BRIDGE.md 확인 섹션 포함 (v13 필수)
- ☐ **온보딩 섹션**: 필수 읽기 문서와 컨텍스트
- ☐ **구체적 파일 경로**: "[파일 경로]"가 아닌 실제 경로 명시
- ☐ **행 번호**: 수정할 정확한 위치 명시
- ☐ **전체 코드**: "..." 없이 완전한 코드 제공
- ☐ **테스트 방법**: 구체적인 테스트 단계
- ☐ **성공 기준**: 명확한 완료 조건
- ☐ **Enterprise 가이드**: 대규모 작업 시 Wave Mode 활용
- ☐ **Phase 분할**: 대규모 작업 시 Phase별 지시서 (v14)
- ☐ **롤백 계획**: 실패 시 복구 전략 포함 (v14)
- ☐ **성과 측정**: Before/After 비교 지표 (v14)
- ☐ **임시방편 금지**: 문제 발견 시 즉시 해결 (v16)

### 프로젝트 특화 체크 (v13 신규)
- ☐ **금지사항 확인**: 자동 스크립트, 구식 패턴 등 체크
- ☐ **최신 변경사항**: 2025-08-22 Supabase 패턴 등 반영
- ☐ **타입 시스템**: @/types에서만 import 확인
- ☐ **스타일링**: Tailwind CSS만 사용 확인
- ☐ **인증 패턴**: getUser() 사용 확인

### QA 요소 체크
- ☐ **사용자 플로우**: Happy Path + Edge Cases
- ☐ **성능 기준**: Core Web Vitals 충족
- ☐ **접근성**: WCAG 2.1 AA 준수
- ☐ **회귀 테스트**: 영향 범위 명시
- ☐ **크로스 환경**: 브라우저/디바이스 호환성

### Enterprise 요소 체크
- ☐ **규모 평가**: 파일 수, LOC, 복잡도 평가
- ☐ **Wave 전략**: 적절한 Wave 전략 선택
- ☐ **Wave 구성**: 각 Wave별 목표와 산출물 명시
- ☐ **품질 게이트**: Wave별 검증 기준 설정
- ☐ **자동화**: CI/CD 및 테스트 자동화 계획

### 실행 가능성 체크
- ☐ 실행 AI가 파일을 찾을 수 있는가?
- ☐ 수정 내용이 명확한가?
- ☐ 테스트 방법이 구체적인가?
- ☐ 의존성이 모두 해결되는가?
- ☐ 테스트 자동화 가능한가?
- ☐ 온보딩으로 충분한 컨텍스트를 제공하는가?
- ☐ **프로젝트 특화 규칙이 명확히 전달되는가?** (v13)
- ☐ 대규모 작업 시 Wave Mode가 적절히 활용되는가?
- ☐ **Phase별로 관리 가능한 크기인가?** (v14)
- ☐ **폴더 구조가 논리적인가?** (v15)
- ☐ **임시방편 없이 완전한 해결책인가?** (v16)

### 저장 및 관리 체크 (v16.1 신규)
- ☐ **저장 위치**: tasks 폴더 하위에 적절히 저장되었는가?
- ☐ **파일명 규칙**: 케밥-케이스로 명확한 목적이 드러나는가?
- ☐ **폴더 구조**: 대규모 작업은 하위 폴더로 체계적으로 관리되는가?
- ☐ **README 작성**: 폴더 구조 사용 시 진입점 README.md가 작성되었는가?
- ☐ **버전 관리**: Git으로 커밋되었는가? (메시지: "docs: Add task instruction for [작업명]")
- ☐ **상태 추적**: 작업 진행 상태가 README.md에 업데이트되었는가?
- ☐ **참조 링크**: 관련 이슈나 PR 링크가 포함되었는가?

### 의도 전달 체크
- ☐ 사용자의 원래 의도가 반영되었는가?
- ☐ 실행 AI가 오해할 여지가 없는가?
- ☐ 예외 상황 처리가 포함되었는가?
- ☐ 사용자 경험이 개선되는가?
- ☐ **프로젝트 특화 규칙을 위반하지 않는가?** (v13)
- ☐ Enterprise 규모 작업이 체계적으로 관리되는가?
- ☐ **실패 시 안전하게 복구 가능한가?** (v14)
- ☐ **기능이 완전히 작동하는가?** (v16)

---

## 📊 업계 표준 참조 (v13 유지)

### Testing Library 우선순위
1. **getByRole**: 접근성 트리 기반 (최우선)
2. **getByLabelText**: 폼 필드 (권장)
3. **getByText**: 텍스트 콘텐츠
4. **getByTestId**: 최후의 수단

### Core Web Vitals 기준
- **LCP**: < 2.5초 (Good), < 4초 (Needs Improvement)
- **FID**: < 100ms (Good), < 300ms (Needs Improvement)
- **CLS**: < 0.1 (Good), < 0.25 (Needs Improvement)

### WCAG 2.1 AA 체크리스트
- 색상 대비: 4.5:1 (일반), 3:1 (큰 텍스트)
- 키보드 접근: 모든 기능 키보드로 가능
- 시간 제한: 조정 가능하거나 없음
- 대체 텍스트: 모든 이미지에 alt 속성

### ISTQB 테스트 프로세스
1. 테스트 계획 (Planning)
2. 테스트 설계 (Design)
3. 테스트 구현 (Implementation)
4. 테스트 실행 (Execution)
5. 테스트 완료 (Closure)

---

## 📝 지시서 작성 실패 시 응답 (v16 개선)

**정보가 부족하거나 불명확할 때:**

```markdown
## 추가 정보 필요

### 명확히 해주세요:
1. **정확한 문제 상황**
   - 어떤 페이지에서 발생하나요?
   - 어떤 동작을 했을 때 발생하나요?
   - 에러 메시지가 있다면 무엇인가요?

2. **예상 동작**
   - 어떻게 동작하기를 원하시나요?
   - 참고할 만한 다른 사이트가 있나요?

3. **프로젝트 정보**
   - 사용 중인 프레임워크는? (Next.js, React 등)
   - 데이터베이스는? (Supabase, Firebase 등)
   - 최근 변경사항이 있나요? (v13)

4. **테스트 환경**
   - 지원해야 할 브라우저는?
   - 모바일 대응 필요한가요?
   - 성능 목표가 있나요?

5. **작업 규모** (v15-16)
   - 영향 받는 파일 수는?
   - 예상 작업 기간은?
   - 팀 규모와 역할은?
   - Phase 분할이 필요한가요?

6. **리스크 관리** (v14)
   - 실패 시 영향 범위는?
   - 롤백 가능한가요?
   - 백업 계획이 있나요?

### 확인 방법:
```bash
# 프로젝트 구조 확인
ls -la src/

# 기술 스택 확인
cat package.json | grep -A 10 "dependencies"

# 프로젝트 특화 규칙 확인 (v13)
cat /docs/CONTEXT_BRIDGE.md

# 최신 변경사항 확인 (v13)
cat /docs/PROJECT.md | grep -A 10 "최근 변경"

# 테스트 도구 확인
cat package.json | grep -A 10 "devDependencies" | grep test

# 프로젝트 규모 확인
find src -name "*.tsx" -o -name "*.ts" | wc -l  # 파일 수
cloc src/  # 코드 라인 수

# 기존 백업/롤백 체계 확인 (v14)
ls -la backup/
git branch -a | grep backup
```

위 정보 확인 후 다시 요청해 주세요.
```

---

## 🎯 핵심 원칙 (v16 완전 통합)

1. **실행 AI는 당신의 지시서만 보고 작업합니다**
   - 프로젝트를 모릅니다
   - 파일 위치를 모릅니다
   - 구체적으로 알려주세요
   - 온보딩 섹션으로 필수 컨텍스트를 제공하세요
   - **🆕 CONTEXT_BRIDGE.md로 프로젝트 특화 규칙을 전달하세요** (v13)
   - **🆕 SuperClaude 명령어를 최상단에 명시하세요** (v14)
   - **🆕 폴더 구조로 체계적으로 안내하세요** (v15)
   - 대규모 작업은 Wave Mode로 단계적으로 안내하세요

2. **사용자의 의도를 100% 구현하는 것이 목표입니다**
   - "실행 가능"이 아닌 "의도대로 구현"
   - 사용자가 원하는 결과물이 나와야 합니다
   - 사용자가 만족하는 경험이 제공되어야 합니다
   - **🆕 프로젝트 특화 규칙을 위반하지 않아야 합니다** (v13)
   - **🆕 실패 시 안전하게 복구 가능해야 합니다** (v14)
   - **🆕 대규모 작업도 Phase별로 완수 가능해야 합니다** (v15)
   - **🆕 임시방편 없이 완전한 해결책이어야 합니다** (v16)
   - Enterprise 규모 작업도 체계적으로 완수되어야 합니다

3. **친절하고 구체적으로 작성하세요**
   - 추상적 표현 금지
   - 실제 경로와 코드 제공
   - 단계별 설명 포함
   - 테스트 가능한 기준 제시
   - **🆕 프로젝트 특화 규칙 명시적 전달** (v13)
   - **🆕 Phase별 명확한 구분과 전환 조건** (v14)
   - Wave별 명확한 목표 제시

4. **품질을 보증하세요**
   - 기능 동작뿐만 아니라 사용자 경험 검증
   - 성능, 접근성, 보안 고려
   - 회귀 테스트로 부작용 방지
   - **🆕 프로젝트 특화 규칙 준수 검증** (v13)
   - **🆕 정량적 성과 측정 기준 제시** (v14)
   - **🆕 기능 완전 작동 확인** (v16)
   - Enterprise 수준의 품질 게이트 적용

5. **지시서 작성 AI도 학습이 필요합니다**
   - Step 0에서 프로젝트 컨텍스트 학습
   - **🆕 CONTEXT_BRIDGE.md 필수 확인** (v13)
   - 온보딩 섹션 작성으로 지식 전달
   - 작업별 필수 문서 파악 능력
   - **🆕 작업 규모 평가 능력** (v15)
   - 대규모 시스템 이해 능력

6. **규모에 맞는 접근법을 선택하세요**
   - Simple: 직접 실행
   - Moderate: 체계적 접근
   - Complex: 병렬 처리 및 위임
   - **🆕 Complex+: 폴더 구조로 체계적 관리** (v15)
   - Enterprise: Wave Mode 오케스트레이션
   - **🆕 대규모: Phase별 분할 지시서** (v14)

7. **🆕 프로젝트 특화 규칙을 최우선으로 하세요** (v13 신규)
   - CONTEXT_BRIDGE.md는 모든 지시서의 첫 번째 섹션
   - 자동 스크립트 생성 절대 금지
   - 최신 변경사항 반영 필수
   - 금지 패턴 사용 차단

8. **🆕 리스크 관리를 필수로 포함하세요** (v14 신규)
   - 모든 중요 작업은 롤백 계획 포함
   - 백업 체크리스트 제공
   - 실패 시 복구 절차 명시
   - 부분 롤백 전략 수립

9. **🆕 체계적 관리를 필수로 포함하세요** (v15 신규)
   - 대규모 작업은 폴더 구조 필수
   - Phase별 독립성 보장
   - 진행 상황 추적 가능

10. **🆕 완전성을 추구하세요** (v16 신규)
    - 빌드 성공이 아닌 기능 완전 작동이 기준
    - 임시방편 절대 금지
    - 문제 발견 시 즉시 해결
    - 근본 원인을 찾아 완전히 해결