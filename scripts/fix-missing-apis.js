#!/usr/bin/env node

/**
 * 프로젝트 전체 누락된 API 자동 생성 스크립트
 * WIREFRAME.md 기반으로 누락된 API 엔드포인트를 자동 생성
 */

const fs = require('fs');
const path = require('path');

console.log('🔧 Missing APIs Auto-Fix Script\n');

// 1. /api/youtube/folders 생성
const foldersRoutePath = path.join(process.cwd(), 'src/app/api/youtube/folders/route.ts');
if (!fs.existsSync(foldersRoutePath)) {
  console.log('📝 Creating /api/youtube/folders/route.ts...');
  
  const foldersRouteContent = `/**
 * API Route: /api/youtube/folders
 * Purpose: Manage YouTube channel folders
 * Auto-generated by fix-youtube-lens.js
 */

import { NextRequest, NextResponse } from 'next/server';
import { createServerClient } from '@/lib/supabase/server';

export const runtime = 'nodejs';

/**
 * GET /api/youtube/folders
 * Fetch user's channel folders
 */
export async function GET(request: NextRequest) {
  try {
    const supabase = await createServerClient();
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError || !user) {
      return NextResponse.json({ error: 'User not authenticated' }, { status: 401 });
    }

    const { data: folders, error } = await supabase
      .from('source_folders')
      .select(\`
        *,
        folder_channels:folder_channels(
          *,
          channel:youtube_channels(*)
        )
      \`)
      .eq('user_id', user.id)
      .order('created_at', { ascending: false });

    if (error) throw error;

    return NextResponse.json({ folders: folders || [] });
  } catch (error) {
    console.error('[/api/youtube/folders] Error:', error);
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Failed to fetch folders' },
      { status: 500 }
    );
  }
}

/**
 * POST /api/youtube/folders
 * Create a new folder
 */
export async function POST(request: NextRequest) {
  try {
    const supabase = await createServerClient();
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError || !user) {
      return NextResponse.json({ error: 'User not authenticated' }, { status: 401 });
    }

    const body = await request.json();
    const { name, description, check_interval_hours = 1, is_monitoring_enabled = true } = body;

    if (!name) {
      return NextResponse.json({ error: 'Folder name is required' }, { status: 400 });
    }

    const { data: folder, error } = await supabase
      .from('source_folders')
      .insert({
        user_id: user.id,
        name,
        description,
        check_interval_hours,
        is_monitoring_enabled
      })
      .select()
      .single();

    if (error) throw error;

    return NextResponse.json({ folder });
  } catch (error) {
    console.error('[/api/youtube/folders] POST Error:', error);
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Failed to create folder' },
      { status: 500 }
    );
  }
}
`;

  // 디렉토리 생성
  const dir = path.dirname(foldersRoutePath);
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
  
  fs.writeFileSync(foldersRoutePath, foldersRouteContent);
  console.log('✅ Created /api/youtube/folders/route.ts');
} else {
  console.log('✓ /api/youtube/folders already exists');
}

// 2. /api/youtube/folders/[id] 동적 라우트 생성
const folderIdRoutePath = path.join(process.cwd(), 'src/app/api/youtube/folders/[id]/route.ts');
if (!fs.existsSync(folderIdRoutePath)) {
  console.log('📝 Creating /api/youtube/folders/[id]/route.ts...');
  
  const folderIdRouteContent = `/**
 * API Route: /api/youtube/folders/[id]
 * Purpose: Manage individual folder operations
 * Auto-generated by fix-youtube-lens.js
 */

import { NextRequest, NextResponse } from 'next/server';
import { createServerClient } from '@/lib/supabase/server';

export const runtime = 'nodejs';

/**
 * PATCH /api/youtube/folders/[id]
 * Update folder settings
 */
export async function PATCH(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const supabase = await createServerClient();
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError || !user) {
      return NextResponse.json({ error: 'User not authenticated' }, { status: 401 });
    }

    const body = await request.json();
    const { data: folder, error } = await supabase
      .from('source_folders')
      .update(body)
      .eq('id', params.id)
      .eq('user_id', user.id)
      .select()
      .single();

    if (error) throw error;

    return NextResponse.json({ folder });
  } catch (error) {
    console.error('[/api/youtube/folders/[id]] PATCH Error:', error);
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Failed to update folder' },
      { status: 500 }
    );
  }
}

/**
 * DELETE /api/youtube/folders/[id]
 * Delete a folder
 */
export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const supabase = await createServerClient();
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError || !user) {
      return NextResponse.json({ error: 'User not authenticated' }, { status: 401 });
    }

    const { error } = await supabase
      .from('source_folders')
      .delete()
      .eq('id', params.id)
      .eq('user_id', user.id);

    if (error) throw error;

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('[/api/youtube/folders/[id]] DELETE Error:', error);
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Failed to delete folder' },
      { status: 500 }
    );
  }
}
`;

  // 디렉토리 생성
  const dir = path.dirname(folderIdRoutePath);
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
  
  fs.writeFileSync(folderIdRoutePath, folderIdRouteContent);
  console.log('✅ Created /api/youtube/folders/[id]/route.ts');
} else {
  console.log('✓ /api/youtube/folders/[id] already exists');
}

// 3. /api/youtube/collections 생성
const collectionsRoutePath = path.join(process.cwd(), 'src/app/api/youtube/collections/route.ts');
if (!fs.existsSync(collectionsRoutePath)) {
  console.log('📝 Creating /api/youtube/collections/route.ts...');
  
  const collectionsRouteContent = `/**
 * API Route: /api/youtube/collections
 * Purpose: Manage YouTube video collections
 * Auto-generated by fix-youtube-lens.js
 */

import { NextRequest, NextResponse } from 'next/server';
import { createServerClient } from '@/lib/supabase/server';

export const runtime = 'nodejs';

/**
 * GET /api/youtube/collections
 * Fetch user's collections
 */
export async function GET(request: NextRequest) {
  try {
    const supabase = await createServerClient();
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError || !user) {
      return NextResponse.json({ error: 'User not authenticated' }, { status: 401 });
    }

    const { data: collections, error } = await supabase
      .from('collections')
      .select(\`
        *,
        collection_items(count)
      \`)
      .eq('user_id', user.id)
      .order('created_at', { ascending: false });

    if (error) throw error;

    return NextResponse.json({ collections: collections || [] });
  } catch (error) {
    console.error('[/api/youtube/collections] Error:', error);
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Failed to fetch collections' },
      { status: 500 }
    );
  }
}

/**
 * POST /api/youtube/collections
 * Create a new collection
 */
export async function POST(request: NextRequest) {
  try {
    const supabase = await createServerClient();
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError || !user) {
      return NextResponse.json({ error: 'User not authenticated' }, { status: 401 });
    }

    const body = await request.json();
    const { name, description, is_public = false } = body;

    if (!name) {
      return NextResponse.json({ error: 'Collection name is required' }, { status: 400 });
    }

    const { data: collection, error } = await supabase
      .from('collections')
      .insert({
        user_id: user.id,
        name,
        description,
        is_public
      })
      .select()
      .single();

    if (error) throw error;

    return NextResponse.json({ collection });
  } catch (error) {
    console.error('[/api/youtube/collections] POST Error:', error);
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Failed to create collection' },
      { status: 500 }
    );
  }
}
`;

  // 디렉토리 생성
  const dir = path.dirname(collectionsRoutePath);
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
  
  fs.writeFileSync(collectionsRoutePath, collectionsRouteContent);
  console.log('✅ Created /api/youtube/collections/route.ts');
} else {
  console.log('✓ /api/youtube/collections already exists');
}

console.log('\n✨ Missing APIs fix completed!');
console.log('\nNext steps:');
console.log('1. Run: npm run dev');
console.log('2. Test your application features');
console.log('3. If issues persist, check browser console for errors');